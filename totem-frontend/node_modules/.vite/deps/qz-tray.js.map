{
  "version": 3,
  "sources": ["browser-external:path", "../../qz-tray/qz-tray.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"path\" has been externalized for browser compatibility. Cannot access \"path.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "'use strict';\n\n/**\n * @version 2.2.5\n * @overview QZ Tray Connector\n * @license LGPL-2.1-only\n * <p/>\n * Connects a web client to the QZ Tray software.\n * Enables printing and device communication from javascript.\n */\nvar qz = (function() {\n\n///// POLYFILLS /////\n\n    if (!Array.isArray) {\n        Array.isArray = function(arg) {\n            return Object.prototype.toString.call(arg) === '[object Array]';\n        };\n    }\n\n    if (!Number.isInteger) {\n        Number.isInteger = function(value) {\n            return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n        };\n    }\n\n///// PRIVATE METHODS /////\n\n    var _qz = {\n        VERSION: \"2.2.5\",                              //must match @version above\n        DEBUG: false,\n\n        log: {\n            /** Debugging messages */\n            trace: function() { if (_qz.DEBUG) { console.log.apply(console, arguments); } },\n            /** General messages */\n            info: function() { console.info.apply(console, arguments); },\n            /** General warnings */\n            warn: function() { console.warn.apply(console, arguments); },\n            /** Debugging errors */\n            allay: function() { if (_qz.DEBUG) { console.warn.apply(console, arguments); } },\n            /** General errors */\n            error: function() { console.error.apply(console, arguments); }\n        },\n\n\n        //stream types\n        streams: {\n            serial: 'SERIAL', usb: 'USB', hid: 'HID', printer: 'PRINTER', file: 'FILE', socket: 'SOCKET'\n        },\n\n\n        websocket: {\n            /** The actual websocket object managing the connection. */\n            connection: null,\n            /** Track if a connection attempt is being cancelled. */\n            shutdown: false,\n\n            /** Default parameters used on new connections. Override values using options parameter on {@link qz.websocket.connect}. */\n            connectConfig: {\n                host: [\"localhost\", \"localhost.qz.io\"], //hosts QZ Tray can be running on\n                hostIndex: 0,                           //internal var - index on host array\n                usingSecure: true,                      //boolean use of secure protocol\n                protocol: {\n                    secure: \"wss://\",                   //secure websocket\n                    insecure: \"ws://\"                   //insecure websocket\n                },\n                port: {\n                    secure: [8181, 8282, 8383, 8484],   //list of secure ports QZ Tray could be listening on\n                    insecure: [8182, 8283, 8384, 8485], //list of insecure ports QZ Tray could be listening on\n                    portIndex: 0                        //internal var - index on active port array\n                },\n                keepAlive: 60,                          //time between pings to keep connection alive, in seconds\n                retries: 0,                             //number of times to reconnect before failing\n                delay: 0                                //seconds before firing a connection\n            },\n\n            setup: {\n                /** Loop through possible ports to open connection, sets web socket calls that will settle the promise. */\n                findConnection: function(config, resolve, reject) {\n                    if (_qz.websocket.shutdown) {\n                        reject(new Error(\"Connection attempt cancelled by user\"));\n                        return;\n                    }\n\n                    //force flag if missing ports\n                    if (!config.port.secure.length) {\n                        if (!config.port.insecure.length) {\n                            reject(new Error(\"No ports have been specified to connect over\"));\n                            return;\n                        } else if (config.usingSecure) {\n                            _qz.log.error(\"No secure ports specified - forcing insecure connection\");\n                            config.usingSecure = false;\n                        }\n                    } else if (!config.port.insecure.length && !config.usingSecure) {\n                        _qz.log.trace(\"No insecure ports specified - forcing secure connection\");\n                        config.usingSecure = true;\n                    }\n\n                    var deeper = function() {\n                        if (_qz.websocket.shutdown) {\n                            //connection attempt was cancelled, bail out\n                            reject(new Error(\"Connection attempt cancelled by user\"));\n                            return;\n                        }\n\n                        config.port.portIndex++;\n\n                        if ((config.usingSecure && config.port.portIndex >= config.port.secure.length)\n                            || (!config.usingSecure && config.port.portIndex >= config.port.insecure.length)) {\n                            if (config.hostIndex >= config.host.length - 1) {\n                                //give up, all hope is lost\n                                reject(new Error(\"Unable to establish connection with QZ\"));\n                                return;\n                            } else {\n                                config.hostIndex++;\n                                config.port.portIndex = 0;\n                            }\n                        }\n\n                        // recursive call until connection established or all ports are exhausted\n                        _qz.websocket.setup.findConnection(config, resolve, reject);\n                    };\n\n                    var address;\n                    if (config.usingSecure) {\n                        address = config.protocol.secure + config.host[config.hostIndex] + \":\" + config.port.secure[config.port.portIndex];\n                    } else {\n                        address = config.protocol.insecure + config.host[config.hostIndex] + \":\" + config.port.insecure[config.port.portIndex];\n                    }\n\n                    try {\n                        _qz.log.trace(\"Attempting connection\", address);\n                        _qz.websocket.connection = new _qz.tools.ws(address);\n                    }\n                    catch(err) {\n                        _qz.log.error(err);\n                        deeper();\n                        return;\n                    }\n\n                    if (_qz.websocket.connection != null) {\n                        _qz.websocket.connection.established = false;\n\n                        //called on successful connection to qz, begins setup of websocket calls and resolves connect promise after certificate is sent\n                        _qz.websocket.connection.onopen = function(evt) {\n                            if (!_qz.websocket.connection.established) {\n                                _qz.log.trace(evt);\n                                _qz.log.info(\"Established connection with QZ Tray on \" + address);\n\n                                _qz.websocket.setup.openConnection({ resolve: resolve, reject: reject });\n\n                                if (config.keepAlive > 0) {\n                                    var interval = setInterval(function() {\n                                        if (!_qz.tools.isActive() || _qz.websocket.connection.interval !== interval) {\n                                            clearInterval(interval);\n                                            return;\n                                        }\n\n                                        _qz.websocket.connection.send(\"ping\");\n                                    }, config.keepAlive * 1000);\n\n                                    _qz.websocket.connection.interval = interval;\n                                }\n                            }\n                        };\n\n                        //called during websocket close during setup\n                        _qz.websocket.connection.onclose = function() {\n                            // Safari compatibility fix to raise error event\n                            if (_qz.websocket.connection && typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1) {\n                                _qz.websocket.connection.onerror();\n                            }\n                        };\n\n                        //called for errors during setup (such as invalid ports), reject connect promise only if all ports have been tried\n                        _qz.websocket.connection.onerror = function(evt) {\n                            _qz.log.trace(evt);\n\n                            _qz.websocket.connection = null;\n\n                            deeper();\n                        };\n                    } else {\n                        reject(new Error(\"Unable to create a websocket connection\"));\n                    }\n                },\n\n                /** Finish setting calls on successful connection, sets web socket calls that won't settle the promise. */\n                openConnection: function(openPromise) {\n                    _qz.websocket.connection.established = true;\n\n                    //called when an open connection is closed\n                    _qz.websocket.connection.onclose = function(evt) {\n                        _qz.log.trace(evt);\n\n                        _qz.websocket.connection = null;\n                        _qz.websocket.callClose(evt);\n                        _qz.log.info(\"Closed connection with QZ Tray\");\n\n                        for(var uid in _qz.websocket.pendingCalls) {\n                            if (_qz.websocket.pendingCalls.hasOwnProperty(uid)) {\n                                _qz.websocket.pendingCalls[uid].reject(new Error(\"Connection closed before response received\"));\n                            }\n                        }\n\n                        //if this is set, then an explicit close call was made\n                        if (this.promise != undefined) {\n                            this.promise.resolve();\n                        }\n                    };\n\n                    //called for any errors with an open connection\n                    _qz.websocket.connection.onerror = function(evt) {\n                        _qz.websocket.callError(evt);\n                    };\n\n                    //send JSON objects to qz\n                    _qz.websocket.connection.sendData = function(obj) {\n                        _qz.log.trace(\"Preparing object for websocket\", obj);\n\n                        if (obj.timestamp == undefined) {\n                            obj.timestamp = Date.now();\n                            if (typeof obj.timestamp !== 'number') {\n                                obj.timestamp = new Date().getTime();\n                            }\n                        }\n                        if (obj.promise != undefined) {\n                            obj.uid = _qz.websocket.setup.newUID();\n                            _qz.websocket.pendingCalls[obj.uid] = obj.promise;\n                        }\n\n                        // track requesting monitor\n                        obj.position = {\n                            x: typeof screen !== 'undefined' ? ((screen.availWidth || screen.width) / 2) + (screen.left || screen.availLeft || 0) : 0,\n                            y: typeof screen !== 'undefined' ? ((screen.availHeight || screen.height) / 2) + (screen.top || screen.availTop || 0) : 0\n                        };\n\n                        try {\n                            if (obj.call != undefined && obj.signature == undefined && _qz.security.needsSigned(obj.call)) {\n                                var signObj = {\n                                    call: obj.call,\n                                    params: obj.params,\n                                    timestamp: obj.timestamp\n                                };\n\n                                //make a hashing promise if not already one\n                                var hashing = _qz.tools.hash(_qz.tools.stringify(signObj));\n                                if (!hashing.then) {\n                                    hashing = _qz.tools.promise(function(resolve) {\n                                        resolve(hashing);\n                                    });\n                                }\n\n                                hashing.then(function(hashed) {\n                                    return _qz.security.callSign(hashed);\n                                }).then(function(signature) {\n                                    _qz.log.trace(\"Signature for call\", signature);\n                                    obj.signature = signature || \"\";\n                                    obj.signAlgorithm = _qz.security.signAlgorithm;\n\n                                    _qz.signContent = undefined;\n                                    _qz.websocket.connection.send(_qz.tools.stringify(obj));\n                                }).catch(function(err) {\n                                    _qz.log.error(\"Signing failed\", err);\n\n                                    if (obj.promise != undefined) {\n                                        obj.promise.reject(new Error(\"Failed to sign request\"));\n                                        delete _qz.websocket.pendingCalls[obj.uid];\n                                    }\n                                });\n                            } else {\n                                _qz.log.trace(\"Signature for call\", obj.signature);\n\n                                //called for pre-signed content and (unsigned) setup calls\n                                _qz.websocket.connection.send(_qz.tools.stringify(obj));\n                            }\n                        }\n                        catch(err) {\n                            _qz.log.error(err);\n\n                            if (obj.promise != undefined) {\n                                obj.promise.reject(err);\n                                delete _qz.websocket.pendingCalls[obj.uid];\n                            }\n                        }\n                    };\n\n                    //receive message from qz\n                    _qz.websocket.connection.onmessage = function(evt) {\n                        var returned = JSON.parse(evt.data);\n\n                        if (returned.uid == null) {\n                            if (returned.type == null) {\n                                //incorrect response format, likely connected to incompatible qz version\n                                _qz.websocket.connection.close(4003, \"Connected to incompatible QZ Tray version\");\n\n                            } else {\n                                //streams (callbacks only, no promises)\n                                switch(returned.type) {\n                                    case _qz.streams.serial:\n                                        if (!returned.event) {\n                                            returned.event = JSON.stringify({ portName: returned.key, output: returned.data });\n                                        }\n\n                                        _qz.serial.callSerial(JSON.parse(returned.event));\n                                        break;\n                                    case _qz.streams.socket:\n                                        _qz.socket.callSocket(JSON.parse(returned.event));\n                                        break;\n                                    case _qz.streams.usb:\n                                        if (!returned.event) {\n                                            returned.event = JSON.stringify({ vendorId: returned.key[0], productId: returned.key[1], output: returned.data });\n                                        }\n\n                                        _qz.usb.callUsb(JSON.parse(returned.event));\n                                        break;\n                                    case _qz.streams.hid:\n                                        _qz.hid.callHid(JSON.parse(returned.event));\n                                        break;\n                                    case _qz.streams.printer:\n                                        _qz.printers.callPrinter(JSON.parse(returned.event));\n                                        break;\n                                    case _qz.streams.file:\n                                        _qz.file.callFile(JSON.parse(returned.event));\n                                        break;\n                                    default:\n                                        _qz.log.allay(\"Cannot determine stream type for callback\", returned);\n                                        break;\n                                }\n                            }\n\n                            return;\n                        }\n\n                        _qz.log.trace(\"Received response from websocket\", returned);\n\n                        var promise = _qz.websocket.pendingCalls[returned.uid];\n                        if (promise == undefined) {\n                            _qz.log.allay('No promise found for returned response');\n                        } else {\n                            if (returned.error != undefined) {\n                                promise.reject(new Error(returned.error));\n                            } else {\n                                promise.resolve(returned.result);\n                            }\n                        }\n\n                        delete _qz.websocket.pendingCalls[returned.uid];\n                    };\n\n\n                    //send up the certificate before making any calls\n                    //also gives the user a chance to deny the connection\n                    function sendCert(cert) {\n                        if (cert === undefined) { cert = null; }\n\n                        //websocket setup, query what version is connected\n                        qz.api.getVersion().then(function(version) {\n                            _qz.websocket.connection.version = version;\n                            _qz.websocket.connection.semver = version.toLowerCase().replace(/-rc\\./g, \"-rc\").split(/[\\\\+\\\\.-]/g);\n                            for(var i = 0; i < _qz.websocket.connection.semver.length; i++) {\n                                try {\n                                    if (i == 3 && _qz.websocket.connection.semver[i].toLowerCase().indexOf(\"rc\") == 0) {\n                                        // Handle \"rc1\" pre-release by negating build info\n                                        _qz.websocket.connection.semver[i] = -(_qz.websocket.connection.semver[i].replace(/\\D/g, \"\"));\n                                        continue;\n                                    }\n                                    _qz.websocket.connection.semver[i] = parseInt(_qz.websocket.connection.semver[i]);\n                                }\n                                catch(ignore) {}\n\n                                if (_qz.websocket.connection.semver.length < 4) {\n                                    _qz.websocket.connection.semver[3] = 0;\n                                }\n                            }\n\n                            //algorithm can be declared before a connection, check for incompatibilities now that we have one\n                            _qz.compatible.algorithm(true);\n                        }).then(function() {\n                            _qz.websocket.connection.sendData({ certificate: cert, promise: openPromise });\n                        });\n                    }\n\n                    _qz.security.callCert().then(sendCert).catch(function(error) {\n                        _qz.log.warn(\"Failed to get certificate:\", error);\n\n                        if (_qz.security.rejectOnCertFailure) {\n                            openPromise.reject(error);\n                        } else {\n                            sendCert(null);\n                        }\n                    });\n                },\n\n                /** Generate unique ID used to map a response to a call. */\n                newUID: function() {\n                    var len = 6;\n                    return (new Array(len + 1).join(\"0\") + (Math.random() * Math.pow(36, len) << 0).toString(36)).slice(-len)\n                }\n            },\n\n            dataPromise: function(callName, params, signature, signingTimestamp) {\n                return _qz.tools.promise(function(resolve, reject) {\n                    var msg = {\n                        call: callName,\n                        promise: { resolve: resolve, reject: reject },\n                        params: params,\n                        signature: signature,\n                        timestamp: signingTimestamp\n                    };\n\n                    _qz.websocket.connection.sendData(msg);\n                });\n            },\n\n            /** Library of promises awaiting a response, uid -> promise */\n            pendingCalls: {},\n\n            /** List of functions to call on error from the websocket. */\n            errorCallbacks: [],\n            /** Calls all functions registered to listen for errors. */\n            callError: function(evt) {\n                if (Array.isArray(_qz.websocket.errorCallbacks)) {\n                    for(var i = 0; i < _qz.websocket.errorCallbacks.length; i++) {\n                        _qz.websocket.errorCallbacks[i](evt);\n                    }\n                } else {\n                    _qz.websocket.errorCallbacks(evt);\n                }\n            },\n\n            /** List of function to call on closing from the websocket. */\n            closedCallbacks: [],\n            /** Calls all functions registered to listen for closing. */\n            callClose: function(evt) {\n                if (Array.isArray(_qz.websocket.closedCallbacks)) {\n                    for(var i = 0; i < _qz.websocket.closedCallbacks.length; i++) {\n                        _qz.websocket.closedCallbacks[i](evt);\n                    }\n                } else {\n                    _qz.websocket.closedCallbacks(evt);\n                }\n            }\n        },\n\n\n        printing: {\n            /** Default options used for new printer configs. Can be overridden using {@link qz.configs.setDefaults}. */\n            defaultConfig: {\n                //value purposes are explained in the qz.configs.setDefaults docs\n\n                bounds: null,\n                colorType: 'color',\n                copies: 1,\n                density: 0,\n                duplex: false,\n                fallbackDensity: null,\n                interpolation: 'bicubic',\n                jobName: null,\n                legacy: false,\n                margins: 0,\n                orientation: null,\n                paperThickness: null,\n                printerTray: null,\n                rasterize: false,\n                rotation: 0,\n                scaleContent: true,\n                size: null,\n                units: 'in',\n\n                forceRaw: false,\n                encoding: null,\n                spool: null\n            }\n        },\n\n\n        serial: {\n            /** List of functions called when receiving data from serial connection. */\n            serialCallbacks: [],\n            /** Calls all functions registered to listen for serial events. */\n            callSerial: function(streamEvent) {\n                if (Array.isArray(_qz.serial.serialCallbacks)) {\n                    for(var i = 0; i < _qz.serial.serialCallbacks.length; i++) {\n                        _qz.serial.serialCallbacks[i](streamEvent);\n                    }\n                } else {\n                    _qz.serial.serialCallbacks(streamEvent);\n                }\n            }\n        },\n\n\n        socket: {\n            /** List of functions called when receiving data from network socket connection. */\n            socketCallbacks: [],\n            /** Calls all functions registered to listen for network socket events. */\n            callSocket: function(socketEvent) {\n                if (Array.isArray(_qz.socket.socketCallbacks)) {\n                    for(var i = 0; i < _qz.socket.socketCallbacks.length; i++) {\n                        _qz.socket.socketCallbacks[i](socketEvent);\n                    }\n                } else {\n                    _qz.socket.socketCallbacks(socketEvent);\n                }\n            }\n        },\n\n\n        usb: {\n            /** List of functions called when receiving data from usb connection. */\n            usbCallbacks: [],\n            /** Calls all functions registered to listen for usb events. */\n            callUsb: function(streamEvent) {\n                if (Array.isArray(_qz.usb.usbCallbacks)) {\n                    for(var i = 0; i < _qz.usb.usbCallbacks.length; i++) {\n                        _qz.usb.usbCallbacks[i](streamEvent);\n                    }\n                } else {\n                    _qz.usb.usbCallbacks(streamEvent);\n                }\n            }\n        },\n\n\n        hid: {\n            /** List of functions called when receiving data from hid connection. */\n            hidCallbacks: [],\n            /** Calls all functions registered to listen for hid events. */\n            callHid: function(streamEvent) {\n                if (Array.isArray(_qz.hid.hidCallbacks)) {\n                    for(var i = 0; i < _qz.hid.hidCallbacks.length; i++) {\n                        _qz.hid.hidCallbacks[i](streamEvent);\n                    }\n                } else {\n                    _qz.hid.hidCallbacks(streamEvent);\n                }\n            }\n        },\n\n\n        printers: {\n            /** List of functions called when receiving data from printer connection. */\n            printerCallbacks: [],\n            /** Calls all functions registered to listen for printer events. */\n            callPrinter: function(streamEvent) {\n                if (Array.isArray(_qz.printers.printerCallbacks)) {\n                    for(var i = 0; i < _qz.printers.printerCallbacks.length; i++) {\n                        _qz.printers.printerCallbacks[i](streamEvent);\n                    }\n                } else {\n                    _qz.printers.printerCallbacks(streamEvent);\n                }\n            }\n        },\n\n\n        file: {\n            /** List of functions called when receiving info regarding file changes. */\n            fileCallbacks: [],\n            /** Calls all functions registered to listen for file events. */\n            callFile: function(streamEvent) {\n                if (Array.isArray(_qz.file.fileCallbacks)) {\n                    for(var i = 0; i < _qz.file.fileCallbacks.length; i++) {\n                        _qz.file.fileCallbacks[i](streamEvent);\n                    }\n                } else {\n                    _qz.file.fileCallbacks(streamEvent);\n                }\n            }\n        },\n\n\n        security: {\n            /** Function used to resolve promise when acquiring site's public certificate. */\n            certHandler: function(resolve, reject) { reject(); },\n            /** Called to create new promise (using {@link _qz.security.certHandler}) for certificate retrieval. */\n            callCert: function() {\n                if (typeof _qz.security.certHandler.then === 'function') {\n                    //already a promise\n                    return _qz.security.certHandler;\n                } else if (_qz.security.certHandler.constructor.name === \"AsyncFunction\") {\n                    //already callable as a promise\n                    return _qz.security.certHandler();\n                } else {\n                    //turn into a promise\n                    return _qz.tools.promise(_qz.security.certHandler);\n                }\n            },\n\n            /** Function used to create promise resolver when requiring signed calls. */\n            signatureFactory: function() { return function(resolve) { resolve(); } },\n            /** Called to create new promise (using {@link _qz.security.signatureFactory}) for signed calls. */\n            callSign: function(toSign) {\n                if (_qz.security.signatureFactory.constructor.name === \"AsyncFunction\") {\n                    //use directly\n                    return _qz.security.signatureFactory(toSign);\n                } else {\n                    //use in a promise\n                    return _qz.tools.promise(_qz.security.signatureFactory(toSign));\n                }\n            },\n\n            /** Signing algorithm used on signatures */\n            signAlgorithm: \"SHA1\",\n\n            rejectOnCertFailure: false,\n\n            needsSigned: function(callName) {\n                const undialoged = [\n                    \"printers.getStatus\",\n                    \"printers.stopListening\",\n                    \"usb.isClaimed\",\n                    \"usb.closeStream\",\n                    \"usb.releaseDevice\",\n                    \"hid.stopListening\",\n                    \"hid.isClaimed\",\n                    \"hid.closeStream\",\n                    \"hid.releaseDevice\",\n                    \"file.stopListening\",\n                    \"getVersion\"\n                ];\n\n                return callName != null && undialoged.indexOf(callName) === -1;\n            }\n        },\n\n\n        tools: {\n            /** Create a new promise */\n            promise: function(resolver) {\n                //prefer global object for historical purposes\n                if (typeof RSVP !== 'undefined') {\n                    return new RSVP.Promise(resolver);\n                } else if (typeof Promise !== 'undefined') {\n                    return new Promise(resolver);\n                } else {\n                    _qz.log.error(\"Promise/A+ support is required.  See qz.api.setPromiseType(...)\");\n                }\n            },\n\n            /** Stub for rejecting with an Error from withing a Promise */\n            reject: function(error) {\n                return _qz.tools.promise(function(resolve, reject) {\n                    reject(error);\n                });\n            },\n\n            stringify: function(object) {\n                //old versions of prototype affect stringify\n                var pjson = Array.prototype.toJSON;\n                delete Array.prototype.toJSON;\n\n                function skipKeys(key, value) {\n                    if (key === \"promise\") {\n                        return undefined;\n                    }\n\n                    return value;\n                }\n\n                var result = JSON.stringify(object, skipKeys);\n\n                if (pjson) {\n                    Array.prototype.toJSON = pjson;\n                }\n\n                return result;\n            },\n\n            hash: function(data) {\n                //prefer global object for historical purposes\n                if (typeof Sha256 !== 'undefined') {\n                    return Sha256.hash(data);\n                } else {\n                    return _qz.SHA.hash(data);\n                }\n            },\n\n            ws: typeof WebSocket !== 'undefined' ? WebSocket : null,\n\n            absolute: function(loc) {\n                if (typeof window !== 'undefined' && typeof document.createElement === 'function') {\n                    var a = document.createElement(\"a\");\n                    a.href = loc;\n                    return a.href;\n                } else if (typeof exports === 'object') {\n                    //node.js\n                    require('path').resolve(loc);\n                }\n                return loc;\n            },\n\n            relative: function(data) {\n                for(var i = 0; i < data.length; i++) {\n                    if (data[i].constructor === Object) {\n                        var absolute = false;\n\n                        if (data[i].data && data[i].data.search && data[i].data.search(/data:image\\/\\w+;base64,/) === 0) {\n                            //upgrade from old base64 behavior\n                            data[i].flavor = \"base64\";\n                            data[i].data = data[i].data.replace(/^data:image\\/\\w+;base64,/, \"\");\n                        } else if (data[i].flavor) {\n                            //if flavor is known, we can directly check for absolute flavor types\n                            if ([\"FILE\", \"XML\"].indexOf(data[i].flavor.toUpperCase()) > -1) {\n                                absolute = true;\n                            }\n                        } else if (data[i].format && [\"HTML\", \"IMAGE\", \"PDF\", \"FILE\", \"XML\"].indexOf(data[i].format.toUpperCase()) > -1) {\n                            //if flavor is not known, all valid pixel formats default to file flavor\n                            //previous v2.0 data also used format as what is now flavor, so we check for those values here too\n                            absolute = true;\n                        } else if (data[i].type && (([\"PIXEL\", \"IMAGE\", \"PDF\"].indexOf(data[i].type.toUpperCase()) > -1 && !data[i].format)\n                            || ([\"HTML\", \"PDF\"].indexOf(data[i].type.toUpperCase()) > -1 && (!data[i].format || data[i].format.toUpperCase() === \"FILE\")))) {\n                            //if all we know is pixel type, then it is image's file flavor\n                            //previous v2.0 data also used type as what is now format, so we check for those value here too\n                            absolute = true;\n                        }\n\n                        if (absolute) {\n                            //change relative links to absolute\n                            data[i].data = _qz.tools.absolute(data[i].data);\n                        }\n                        if (data[i].options && typeof data[i].options.overlay === 'string') {\n                            data[i].options.overlay = _qz.tools.absolute(data[i].options.overlay);\n                        }\n                    }\n                }\n            },\n\n            /** Performs deep copy to target from remaining params */\n            extend: function(target) {\n                //special case when reassigning properties as objects in a deep copy\n                if (typeof target !== 'object') {\n                    target = {};\n                }\n\n                for(var i = 1; i < arguments.length; i++) {\n                    var source = arguments[i];\n                    if (!source) { continue; }\n\n                    for(var key in source) {\n                        if (source.hasOwnProperty(key)) {\n                            if (target === source[key]) { continue; }\n\n                            if (source[key] && source[key].constructor && source[key].constructor === Object) {\n                                var clone;\n                                if (Array.isArray(source[key])) {\n                                    clone = target[key] || [];\n                                } else {\n                                    clone = target[key] || {};\n                                }\n\n                                target[key] = _qz.tools.extend(clone, source[key]);\n                            } else if (source[key] !== undefined) {\n                                target[key] = source[key];\n                            }\n                        }\n                    }\n                }\n\n                return target;\n            },\n\n            versionCompare: function(major, minor, patch, build) {\n                if (_qz.tools.assertActive()) {\n                    var semver = _qz.websocket.connection.semver;\n                    if (semver[0] != major) {\n                        return semver[0] - major;\n                    }\n                    if (minor != undefined && semver[1] != minor) {\n                        return semver[1] - minor;\n                    }\n                    if (patch != undefined && semver[2] != patch) {\n                        return semver[2] - patch;\n                    }\n                    if (build != undefined && semver.length > 3 && semver[3] != build) {\n                        return Number.isInteger(semver[3]) && Number.isInteger(build) ? semver[3] - build : semver[3].toString().localeCompare(build.toString());\n                    }\n                    return 0;\n                }\n            },\n\n            isVersion: function(major, minor, patch, build) {\n                return _qz.tools.versionCompare(major, minor, patch, build) == 0;\n            },\n\n            isActive: function() {\n                return !_qz.websocket.shutdown && _qz.websocket.connection != null\n                    && (_qz.websocket.connection.readyState === _qz.tools.ws.OPEN\n                        || _qz.websocket.connection.readyState === _qz.tools.ws.CONNECTING);\n            },\n\n            assertActive: function() {\n                if (_qz.tools.isActive()) {\n                    return true;\n                }\n                // Promise won't reject on throw; yet better than 'undefined'\n                throw new Error(\"A connection to QZ has not been established yet\");\n            },\n\n            uint8ArrayToHex: function(uint8) {\n                return Array.from(uint8)\n                    .map(function(i) { return i.toString(16).padStart(2, '0'); })\n                    .join('');\n            },\n\n            uint8ArrayToBase64: function(uint8) {\n                /**\n                 * Adapted from Egor Nepomnyaschih's code under MIT Licence (C) 2020\n                 * see https://gist.github.com/enepomnyaschih/72c423f727d395eeaa09697058238727\n                 */\n                var map = [\n                    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\",\n                    \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\",\n                    \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"+\", \"/\"\n                ];\n\n                var result = '', i, l = uint8.length;\n                for (i = 2; i < l; i += 3) {\n                    result += map[uint8[i - 2] >> 2];\n                    result += map[((uint8[i - 2] & 0x03) << 4) | (uint8[i - 1] >> 4)];\n                    result += map[((uint8[i - 1] & 0x0F) << 2) | (uint8[i] >> 6)];\n                    result += map[uint8[i] & 0x3F];\n                }\n                if (i === l + 1) { // 1 octet yet to write\n                    result += map[uint8[i - 2] >> 2];\n                    result += map[(uint8[i - 2] & 0x03) << 4];\n                    result += \"==\";\n                }\n                if (i === l) { // 2 octets yet to write\n                    result += map[uint8[i - 2] >> 2];\n                    result += map[((uint8[i - 2] & 0x03) << 4) | (uint8[i - 1] >> 4)];\n                    result += map[(uint8[i - 1] & 0x0F) << 2];\n                    result += \"=\";\n                }\n                return result;\n            },\n        },\n\n        compatible: {\n            /** Converts message format to a previous version's */\n            data: function(printData) {\n                // special handling for Uint8Array\n                for(var i = 0; i < printData.length; i++) {\n                    if (printData[i].constructor === Object && printData[i].data instanceof Uint8Array) {\n                        if (printData[i].flavor) {\n                            var flavor = printData[i].flavor.toString().toUpperCase();\n                            switch(flavor) {\n                                case 'BASE64':\n                                    printData[i].data = _qz.tools.uint8ArrayToBase64(printData[i].data);\n                                    break;\n                                case 'HEX':\n                                    printData[i].data = _qz.tools.uint8ArrayToHex(printData[i].data);\n                                    break;\n                                default:\n                                    throw new Error(\"Uint8Array conversion to '\" + flavor + \"' is not supported.\");\n                            }\n                        }\n                    }\n                }\n\n                if(_qz.tools.versionCompare(2, 2, 4) < 0) {\n                    for(var i = 0; i < printData.length; i++) {\n                        if (printData[i].constructor === Object) {\n                            // dotDensity: \"double-legacy|single-legacy\" since 2.2.4.  Fallback to \"double|single\"\n                            if (printData[i].options && typeof printData[i].options.dotDensity === 'string') {\n                                printData[i].options.dotDensity = printData[i].options.dotDensity.toLowerCase().replace(\"-legacy\", \"\");\n                            }\n                        }\n                    }\n                }\n\n                if (_qz.tools.isVersion(2, 0)) {\n                    /*\n                    2.0.x conversion\n                    -----\n                    type=pixel -> use format as 2.0 type (unless 'command' format, which forces 2.0 'raw' type)\n                    type=raw -> 2.0 type has to be 'raw'\n                                if format is 'image' -> force 2.0 'image' format, ignore everything else (unsupported in 2.0)\n\n                     flavor translates straight to 2.0 format (unless forced to 'raw'/'image')\n                     */\n                    _qz.log.trace(\"Converting print data to v2.0 for \" + _qz.websocket.connection.version);\n                    for(var i = 0; i < printData.length; i++) {\n                        if (printData[i].constructor === Object) {\n                            if (printData[i].type && printData[i].type.toUpperCase() === \"RAW\" && printData[i].format && printData[i].format.toUpperCase() === \"IMAGE\") {\n                                if (printData[i].flavor && printData[i].flavor.toUpperCase() === \"BASE64\") {\n                                    //special case for raw base64 images\n                                    printData[i].data = \"data:image/compat;base64,\" + printData[i].data;\n                                }\n                                printData[i].flavor = \"IMAGE\"; //forces 'image' format when shifting for conversion\n                            }\n                            if ((printData[i].type && printData[i].type.toUpperCase() === \"RAW\") || (printData[i].format && printData[i].format.toUpperCase() === \"COMMAND\")) {\n                                printData[i].format = \"RAW\"; //forces 'raw' type when shifting for conversion\n                            }\n\n                            printData[i].type = printData[i].format;\n                            printData[i].format = printData[i].flavor;\n                            delete printData[i].flavor;\n                        }\n                    }\n                }\n            },\n\n            /* Converts config defaults to match previous version */\n            config: function(config, dirty) {\n                if (_qz.tools.isVersion(2, 0)) {\n                    if (!dirty.rasterize) {\n                        config.rasterize = true;\n                    }\n                }\n                if(_qz.tools.versionCompare(2, 2) < 0) {\n                    if(config.forceRaw !== 'undefined') {\n                        config.altPrinting = config.forceRaw;\n                        delete config.forceRaw;\n                    }\n                }\n                if(_qz.tools.versionCompare(2, 1, 2, 11) < 0) {\n                    if(config.spool) {\n                        if(config.spool.size) {\n                            config.perSpool = config.spool.size;\n                            delete config.spool.size;\n                        }\n                        if(config.spool.end) {\n                            config.endOfDoc = config.spool.end;\n                            delete config.spool.end;\n                        }\n                        delete config.spool;\n                    }\n                }\n                return config;\n            },\n\n            /** Compat wrapper with previous version **/\n            networking: function(hostname, port, signature, signingTimestamp, mappingCallback) {\n                // Use 2.0\n                if (_qz.tools.isVersion(2, 0)) {\n                    return _qz.tools.promise(function(resolve, reject) {\n                        _qz.websocket.dataPromise('websocket.getNetworkInfo', {\n                            hostname: hostname,\n                            port: port\n                        }, signature, signingTimestamp).then(function(data) {\n                            if (typeof mappingCallback !== 'undefined') {\n                                resolve(mappingCallback(data));\n                            } else {\n                                resolve(data);\n                            }\n                        }, reject);\n                    });\n                }\n                // Wrap 2.1\n                return _qz.tools.promise(function(resolve, reject) {\n                    _qz.websocket.dataPromise('networking.device', {\n                        hostname: hostname,\n                        port: port\n                    }, signature, signingTimestamp).then(function(data) {\n                        resolve({ ipAddress: data.ip, macAddress: data.mac });\n                    }, reject);\n                });\n            },\n\n            /** Check if QZ version supports chosen algorithm */\n            algorithm: function(quiet) {\n                //if not connected yet we will assume compatibility exists for the time being\n                //check semver to guard race condition for pending connections\n                if (_qz.tools.isActive() && _qz.websocket.connection.semver) {\n                    if (_qz.tools.isVersion(2, 0)) {\n                        if (!quiet) {\n                            _qz.log.warn(\"Connected to an older version of QZ, alternate signature algorithms are not supported\");\n                        }\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n        },\n\n        /**\n         * Adapted from Chris Veness's code under MIT Licence (C) 2002\n         * see http://www.movable-type.co.uk/scripts/sha256.html\n         */\n        SHA: {\n            //@formatter:off - keep this block compact\n            hash: function(msg) {\n                // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n                msg = _qz.SHA._utf8Encode(msg) + String.fromCharCode(0x80);\n\n                // constants [§4.2.2]\n                var K = [\n                    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n                    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n                    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n                    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n                    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n                    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n                    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n                    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n                ];\n                // initial hash value [§5.3.1]\n                var H = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];\n\n                // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n                var l = msg.length / 4 + 2; // length (in 32-bit integers) of msg + ‘1’ + appended length\n                var N = Math.ceil(l / 16);  // number of 16-integer-blocks required to hold 'l' ints\n                var M = new Array(N);\n\n                for(var i = 0; i < N; i++) {\n                    M[i] = new Array(16);\n                    for(var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n                        M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                            (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n                    } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n                }\n                // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n                // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n                // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n                M[N-1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32);\n                M[N-1][14] = Math.floor(M[N-1][14]);\n                M[N-1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n                // HASH COMPUTATION [§6.1.2]\n                var W = new Array(64); var a, b, c, d, e, f, g, h;\n                for(var i = 0; i < N; i++) {\n                    // 1 - prepare message schedule 'W'\n                    for(var t = 0; t < 16; t++) { W[t] = M[i][t]; }\n                    for(var t = 16; t < 64; t++) { W[t] = (_qz.SHA._dev1(W[t-2]) + W[t-7] + _qz.SHA._dev0(W[t-15]) + W[t-16]) & 0xffffffff; }\n                    // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n                    a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n                    // 3 - main loop (note 'addition modulo 2^32')\n                    for(var t = 0; t < 64; t++) {\n                        var T1 = h + _qz.SHA._sig1(e) + _qz.SHA._ch(e, f, g) + K[t] + W[t];\n                        var T2 = _qz.SHA._sig0(a) + _qz.SHA._maj(a, b, c);\n                        h = g; g = f; f = e; e = (d + T1) & 0xffffffff;\n                        d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff;\n                    }\n                    // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n                    H[0] = (H[0]+a) & 0xffffffff; H[1] = (H[1]+b) & 0xffffffff; H[2] = (H[2]+c) & 0xffffffff; H[3] = (H[3]+d) & 0xffffffff;\n                    H[4] = (H[4]+e) & 0xffffffff; H[5] = (H[5]+f) & 0xffffffff; H[6] = (H[6]+g) & 0xffffffff; H[7] = (H[7]+h) & 0xffffffff;\n                }\n\n                return _qz.SHA._hexStr(H[0]) + _qz.SHA._hexStr(H[1]) + _qz.SHA._hexStr(H[2]) + _qz.SHA._hexStr(H[3]) +\n                    _qz.SHA._hexStr(H[4]) + _qz.SHA._hexStr(H[5]) + _qz.SHA._hexStr(H[6]) + _qz.SHA._hexStr(H[7]);\n            },\n\n            // Rotates right (circular right shift) value x by n positions\n            _rotr: function(n, x) { return (x >>> n) | (x << (32 - n)); },\n            // logical functions\n            _sig0: function(x) { return _qz.SHA._rotr(2, x) ^ _qz.SHA._rotr(13, x) ^ _qz.SHA._rotr(22, x); },\n            _sig1: function(x) { return _qz.SHA._rotr(6, x) ^ _qz.SHA._rotr(11, x) ^ _qz.SHA._rotr(25, x); },\n            _dev0: function(x) { return _qz.SHA._rotr(7, x) ^ _qz.SHA._rotr(18, x) ^ (x >>> 3); },\n            _dev1: function(x) { return _qz.SHA._rotr(17, x) ^ _qz.SHA._rotr(19, x) ^ (x >>> 10); },\n            _ch: function(x, y, z) { return (x & y) ^ (~x & z); },\n            _maj: function(x, y, z) { return (x & y) ^ (x & z) ^ (y & z); },\n            // note can't use toString(16) as it is implementation-dependant, and in IE returns signed numbers when used on full words\n            _hexStr: function(n) { var s = \"\", v; for(var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; },\n            // implementation of deprecated unescape() based on https://cwestblog.com/2011/05/23/escape-unescape-deprecated/ (and comments)\n            _unescape: function(str) {\n                return str.replace(/%(u[\\da-f]{4}|[\\da-f]{2})/gi, function(seq) {\n                    if (seq.length - 1) {\n                        return String.fromCharCode(parseInt(seq.substring(seq.length - 3 ? 2 : 1), 16))\n                    } else {\n                        var code = seq.charCodeAt(0);\n                        return code < 256 ? \"%\" + (0 + code.toString(16)).slice(-2).toUpperCase() : \"%u\" + (\"000\" + code.toString(16)).slice(-4).toUpperCase()\n                    }\n                });\n            },\n            _utf8Encode: function(str) {\n                return _qz.SHA._unescape(encodeURIComponent(str));\n            }\n            //@formatter:on\n        },\n    };\n\n\n///// CONFIG CLASS ////\n\n    /** Object to handle configured printer options. */\n    function Config(printer, opts) {\n\n        this.config = _qz.tools.extend({}, _qz.printing.defaultConfig); //create a copy of the default options\n        this._dirtyOpts = {}; //track which config options have changed from the defaults\n\n        /**\n         * Set the printer assigned to this config.\n         * @param {string|Object} newPrinter Name of printer. Use object type to specify printing to file or host.\n         *  @param {string} [newPrinter.name] Name of printer to send printing.\n         *  @param {string} [newPrinter.file] DEPRECATED: Name of file to send printing.\n         *  @param {string} [newPrinter.host] IP address or host name to send printing.\n         *  @param {string} [newPrinter.port] Port used by &lt;printer.host>.\n         */\n        this.setPrinter = function(newPrinter) {\n            if (typeof newPrinter === 'string') {\n                newPrinter = { name: newPrinter };\n            }\n            this.printer = newPrinter;\n        };\n\n        /**\n         *  @returns {Object} The printer currently assigned to this config.\n         */\n        this.getPrinter = function() {\n            return this.printer;\n        };\n\n        /**\n         * Alter any of the printer options currently applied to this config.\n         * @param newOpts {Object} The options to change. See <code>qz.configs.setDefaults</code> docs for available values.\n         *\n         * @see qz.configs.setDefaults\n         */\n        this.reconfigure = function(newOpts) {\n            for(var key in newOpts) {\n                if (newOpts[key] !== undefined) {\n                    this._dirtyOpts[key] = true;\n                }\n            }\n\n            _qz.tools.extend(this.config, newOpts);\n        };\n\n        /**\n         * @returns {Object} The currently applied options on this config.\n         */\n        this.getOptions = function() {\n            return _qz.compatible.config(this.config, this._dirtyOpts);\n        };\n\n        // init calls for new config object\n        this.setPrinter(printer);\n        this.reconfigure(opts);\n    }\n\n    /**\n     * Shortcut method for calling <code>qz.print</code> with a particular config.\n     * @param {Array<Object|string>} data Array of data being sent to the printer. See <code>qz.print</code> docs for available values.\n     * @param {boolean} [signature] Pre-signed signature of JSON string containing <code>call</code>, <code>params</code>, and <code>timestamp</code>.\n     * @param {number} [signingTimestamp] Required with <code>signature</code>. Timestamp used with pre-signed content.\n     *\n     * @example\n     * qz.print(myConfig, ...); // OR\n     * myConfig.print(...);\n     *\n     * @see qz.print\n     */\n    Config.prototype.print = function(data, signature, signingTimestamp) {\n        qz.print(this, data, signature, signingTimestamp);\n    };\n\n\n///// PUBLIC METHODS /////\n\n    /** @namespace qz */\n    var qz = {\n\n        /**\n         * Calls related specifically to the web socket connection.\n         * @namespace qz.websocket\n         */\n        websocket: {\n            /**\n             * Check connection status. Active connection is necessary for other calls to run.\n             *\n             * @returns {boolean} If there is an active connection with QZ Tray.\n             *\n             * @see connect\n             *\n             * @memberof  qz.websocket\n             */\n            isActive: function() {\n                return _qz.tools.isActive();\n            },\n\n            /**\n             * Call to setup connection with QZ Tray on user's system.\n             *\n             * @param {Object} [options] Configuration options for the web socket connection.\n             *  @param {string|Array<string>} [options.host=['localhost', 'localhost.qz.io']] Host running the QZ Tray software.\n             *  @param {Object} [options.port] Config options for ports to cycle.\n             *   @param {Array<number>} [options.port.secure=[8181, 8282, 8383, 8484]] Array of secure (WSS) ports to try\n             *   @param {Array<number>} [options.port.insecure=[8182, 8283, 8384, 8485]] Array of insecure (WS) ports to try\n             *  @param {boolean} [options.usingSecure=true] If the web socket should try to use secure ports for connecting.\n             *  @param {number} [options.keepAlive=60] Seconds between keep-alive pings to keep connection open. Set to 0 to disable.\n             *  @param {number} [options.retries=0] Number of times to reconnect before failing.\n             *  @param {number} [options.delay=0] Seconds before firing a connection.  Ignored if <code>options.retries</code> is 0.\n             *\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.websocket\n             */\n            connect: function(options) {\n                return _qz.tools.promise(function(resolve, reject) {\n                    if (_qz.websocket.connection) {\n                        const state = _qz.websocket.connection.readyState;\n\n                        if (state === _qz.tools.ws.OPEN) {\n                            reject(new Error(\"An open connection with QZ Tray already exists\"));\n                            return;\n                        } else if (state === _qz.tools.ws.CONNECTING) {\n                            reject(new Error(\"The current connection attempt has not returned yet\"));\n                            return;\n                        } else if (state === _qz.tools.ws.CLOSING) {\n                            reject(new Error(\"Waiting for previous disconnect request to complete\"));\n                            return;\n                        }\n                    }\n\n                    if (!_qz.tools.ws) {\n                        reject(new Error(\"WebSocket not supported by this browser\"));\n                        return;\n                    } else if (!_qz.tools.ws.CLOSED || _qz.tools.ws.CLOSED == 2) {\n                        reject(new Error(\"Unsupported WebSocket version detected: HyBi-00/Hixie-76\"));\n                        return;\n                    }\n\n                    //ensure some form of options exists for value checks\n                    if (options == undefined) { options = {}; }\n\n                    //disable secure ports if page is not secure\n                    if (typeof location === 'undefined' || location.protocol !== 'https:') {\n                        //respect forcing secure ports if it is defined, otherwise disable\n                        if (typeof options.usingSecure === 'undefined') {\n                            _qz.log.trace(\"Disabling secure ports due to insecure page\");\n                            options.usingSecure = false;\n                        }\n                    }\n\n                    //ensure any hosts are passed to internals as an array\n                    if (typeof options.host !== 'undefined' && !Array.isArray(options.host)) {\n                        options.host = [options.host];\n                    }\n\n                    _qz.websocket.shutdown = false; //reset state for new connection attempt\n                    var attempt = function(count) {\n                        var tried = false;\n                        var nextAttempt = function() {\n                            if (!tried) {\n                                tried = true;\n\n                                if (options && count < options.retries) {\n                                    attempt(count + 1);\n                                } else {\n                                    _qz.websocket.connection = null;\n                                    reject.apply(null, arguments);\n                                }\n                            }\n                        };\n\n                        var delayed = function() {\n                            var config = _qz.tools.extend({}, _qz.websocket.connectConfig, options);\n                            _qz.websocket.setup.findConnection(config, resolve, nextAttempt)\n                        };\n                        if (count == 0) {\n                            delayed(); // only retries will be called with a delay\n                        } else {\n                            setTimeout(delayed, options.delay * 1000);\n                        }\n                    };\n\n                    attempt(0);\n                });\n            },\n\n            /**\n             * Stop any active connection with QZ Tray.\n             *\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.websocket\n             */\n            disconnect: function() {\n                return _qz.tools.promise(function(resolve, reject) {\n                    if (_qz.websocket.connection != null) {\n                        if (_qz.tools.isActive()) {\n                            // handles closing both 'connecting' and 'connected' states\n                            _qz.websocket.shutdown = true;\n                            _qz.websocket.connection.promise = { resolve: resolve, reject: reject };\n                            _qz.websocket.connection.close();\n                        } else {\n                            reject(new Error(\"Current connection is still closing\"));\n                        }\n                    } else {\n                        reject(new Error(\"No open connection with QZ Tray\"));\n                    }\n                });\n            },\n\n            /**\n             * List of functions called for any connections errors outside of an API call.<p/>\n             * Also called if {@link websocket#connect} fails to connect.\n             *\n             * @param {Function|Array<Function>} calls Single or array of <code>Function({Event} event)</code> calls.\n             *\n             * @memberof qz.websocket\n             */\n            setErrorCallbacks: function(calls) {\n                _qz.websocket.errorCallbacks = calls;\n            },\n\n            /**\n             * List of functions called for any connection closing event outside of an API call.<p/>\n             * Also called when {@link websocket#disconnect} is called.\n             *\n             * @param {Function|Array<Function>} calls Single or array of <code>Function({Event} event)</code> calls.\n             *\n             * @memberof qz.websocket\n             */\n            setClosedCallbacks: function(calls) {\n                _qz.websocket.closedCallbacks = calls;\n            },\n\n            /**\n             * @deprecated Since 2.1.0.  Please use qz.networking.device() instead\n             *\n             * @param {string} [hostname] Hostname to try to connect to when determining network interfaces, defaults to \"google.com\"\n             * @param {number} [port] Port to use with custom hostname, defaults to 443\n             * @param {string} [signature] Pre-signed signature of hashed JSON string containing <code>call='websocket.getNetworkInfo'</code>, <code>params</code> object, and <code>timestamp</code>.\n             * @param {number} [signingTimestamp] Required with <code>signature</code>. Timestamp used with pre-signed content.\n             *\n             * @returns {Promise<Object<{ipAddress: string, macAddress: string}>|Error>} Connected system's network information.\n             *\n             * @memberof qz.websocket\n             */\n            getNetworkInfo: _qz.compatible.networking,\n\n            /**\n             * @returns {Object<{socket: String, host: String, port: Number}>} Details of active websocket connection\n             *\n             * @memberof qz.websocket\n             */\n            getConnectionInfo: function() {\n                if (_qz.tools.assertActive()) {\n                    var url = _qz.websocket.connection.url.split(/[:\\/]+/g);\n                    return { socket: url[0], host: url[1], port: +url[2] };\n                }\n            }\n        },\n\n\n        /**\n         * Calls related to getting printer information from the connection.\n         * @namespace qz.printers\n         */\n        printers: {\n            /**\n             * @param {string} [signature] Pre-signed signature of hashed JSON string containing <code>call='printers.getDefault</code>, <code>params</code>, and <code>timestamp</code>.\n             * @param {number} [signingTimestamp] Required with <code>signature</code>. Timestamp used with pre-signed content.\n             *\n             * @returns {Promise<string|Error>} Name of the connected system's default printer.\n             *\n             * @memberof qz.printers\n             */\n            getDefault: function(signature, signingTimestamp) {\n                return _qz.websocket.dataPromise('printers.getDefault', null, signature, signingTimestamp);\n            },\n\n            /**\n             * @param {string} [query] Search for a specific printer. All printers are returned if not provided.\n             * @param {string} [signature] Pre-signed signature of hashed JSON string containing <code>call='printers.find'</code>, <code>params</code>, and <code>timestamp</code>.\n             * @param {number} [signingTimestamp] Required with <code>signature</code>. Timestamp used with pre-signed content.\n             *\n             * @returns {Promise<Array<string>|string|Error>} The matched printer name if <code>query</code> is provided.\n             *                                                Otherwise an array of printer names found on the connected system.\n             *\n             * @memberof qz.printers\n             */\n            find: function(query, signature, signingTimestamp) {\n                return _qz.websocket.dataPromise('printers.find', { query: query }, signature, signingTimestamp);\n            },\n\n            /**\n             * Provides a list, with additional information, for each printer available to QZ.\n             *\n             * @returns {Promise<Array<Object>|Object|Error>}\n             *\n             * @memberof qz.printers\n             */\n            details: function() {\n                return _qz.websocket.dataPromise('printers.detail');\n            },\n\n            /**\n             * Start listening for printer status events, such as paper_jam events.\n             * Reported under the ACTION type in the streamEvent on callbacks.\n             *\n             * @returns {Promise<null|Error>}\n             * @since 2.1.0\n             *\n             * @see qz.printers.setPrinterCallbacks\n             *\n             * @param {null|string|Array<string>} printers Printer or list of printers to listen to, null listens to all.\n             * @param {Object|null} [options] Printer listener options\n             *  @param {null|boolean} [options.jobData=false] Flag indicating if raw spool file content should be return as well as status information (Windows only)\n             *  @param {null|number} [options.maxJobData=-1] Maximum number of bytes to returns for raw spooled file content (Windows only)\n             *  @param {null|string} [options.flavor=\"plain\"] Flavor of data format returned. Valid flavors are <code>[base64 | hex | plain*]</code> (Windows only)\n             *\n             * @memberof qz.printers\n             */\n            startListening: function(printers, options) {\n                if (!Array.isArray(printers)) {\n                    printers = [printers];\n                }\n                var params = {\n                    printerNames: printers\n                };\n                if (options && options.jobData == true) params.jobData = true;\n                if (options && options.maxJobData) params.maxJobData = options.maxJobData;\n                if (options && options.flavor) params.flavor = options.flavor;\n                return _qz.websocket.dataPromise('printers.startListening', params);\n            },\n\n            /**\n             * Clear the queue of a specified printer or printers. Does not delete retained jobs.\n             *\n             * @param {string|Object} [options] Name of printer to clear\n             *  @param {string} [options.printerName] Name of printer to clear\n             *  @param {number} [options.jobId] Cancel a job of a specific JobId instead of canceling all. Must include a printerName.\n             *\n             * @returns {Promise<null|Error>}\n             * @since 2.2.4\n             *\n             * @memberof qz.printers\n             */\n            clearQueue: function(options) {\n                if (typeof options !== 'object') {\n                    options = {\n                        printerName: options\n                    };\n                }\n                return _qz.websocket.dataPromise('printers.clearQueue', options);\n            },\n\n            /**\n             * Stop listening for printer status actions.\n             *\n             * @returns {Promise<null|Error>}\n             * @since 2.1.0\n             *\n             * @see qz.printers.setPrinterCallbacks\n             *\n             * @memberof qz.printers\n             */\n            stopListening: function() {\n                return _qz.websocket.dataPromise('printers.stopListening');\n            },\n\n            /**\n             * Retrieve current printer status from any active listeners.\n             *\n             * @returns {Promise<null|Error>}\n             * @since 2.1.0\n             *\n             * @see qz.printers.startListening\n             *\n             * @memberof qz.printers\n             */\n            getStatus: function() {\n                return _qz.websocket.dataPromise('printers.getStatus');\n            },\n\n            /**\n             * List of functions called for any printer status change.\n             * Event data will contain <code>{string} printerName</code> and <code>{string} status</code> for all types.\n             *  For RECEIVE types, <code>{Array} output</code> (in hexadecimal format).\n             *  For ERROR types, <code>{string} exception</code>.\n             *  For ACTION types, <code>{string} actionType</code>.\n             *\n             * @param {Function|Array<Function>} calls Single or array of <code>Function({Object} eventData)</code> calls.\n             * @since 2.1.0\n             *\n             * @memberof qz.printers\n             */\n            setPrinterCallbacks: function(calls) {\n                _qz.printers.printerCallbacks = calls;\n            }\n        },\n\n        /**\n         * Calls related to setting up new printer configurations.\n         * @namespace qz.configs\n         */\n        configs: {\n            /**\n             * Default options used by new configs if not overridden.\n             * Setting a value to NULL will use the printer's default options.\n             * Updating these will not update the options on any created config.\n             *\n             * @param {Object} options Default options used by printer configs if not overridden.\n             *\n             *  @param {Object} [options.bounds=null] Bounding box rectangle.\n             *   @param {number} [options.bounds.x=0] Distance from left for bounding box starting corner\n             *   @param {number} [options.bounds.y=0] Distance from top for bounding box starting corner\n             *   @param {number} [options.bounds.width=0] Width of bounding box\n             *   @param {number} [options.bounds.height=0] Height of bounding box\n             *  @param {string} [options.colorType='color'] Valid values <code>[color | grayscale | blackwhite | default]</code>\n             *  @param {number} [options.copies=1] Number of copies to be printed.\n             *  @param {number|Array<number>|Object|Array<Object>|string} [options.density=0] Pixel density (DPI, DPMM, or DPCM depending on <code>[options.units]</code>).\n             *      If provided as an array, uses the first supported density found (or the first entry if none found).\n             *      If provided as a string, valid values are <code>[best | draft]</code>, corresponding to highest or lowest reported density respectively.\n             *  @param {number} [options.density.cross=0] Asymmetric pixel density for the cross feed direction.\n             *  @param {number} [options.density.feed=0] Asymmetric pixel density for the feed direction.\n             *  @param {boolean|string} [options.duplex=false] Double sided printing, Can specify duplex style by passing a string value: <code>[one-sided | duplex | long-edge | tumble | short-edge]</code>\n             *  @param {number} [options.fallbackDensity=null] Value used when default density value cannot be read, or in cases where reported as \"Normal\" by the driver, (in DPI, DPMM, or DPCM depending on <code>[options.units]</code>).\n             *  @param {string} [options.interpolation='bicubic'] Valid values <code>[bicubic | bilinear | nearest-neighbor]</code>. Controls how images are handled when resized.\n             *  @param {string} [options.jobName=null] Name to display in print queue.\n             *  @param {boolean} [options.legacy=false] If legacy style printing should be used.\n             *  @param {Object|number} [options.margins=0] If just a number is provided, it is used as the margin for all sides.\n             *   @param {number} [options.margins.top=0]\n             *   @param {number} [options.margins.right=0]\n             *   @param {number} [options.margins.bottom=0]\n             *   @param {number} [options.margins.left=0]\n             *  @param {string} [options.orientation=null] Valid values <code>[portrait | landscape | reverse-landscape | null]</code>.\n             *                                             If set to <code>null</code>, orientation will be determined automatically.\n             *  @param {number} [options.paperThickness=null]\n             *  @param {string|number} [options.printerTray=null] Printer tray to pull from. The number N assumes string equivalent of 'Tray N'. Uses printer default if NULL.\n             *  @param {boolean} [options.rasterize=false] Whether documents should be rasterized before printing.\n             *                                             Specifying <code>[options.density]</code> for PDF print formats will set this to <code>true</code>.\n             *  @param {number} [options.rotation=0] Image rotation in degrees.\n             *  @param {boolean} [options.scaleContent=true] Scales print content to page size, keeping ratio.\n             *  @param {Object} [options.size=null] Paper size.\n             *   @param {number} [options.size.width=null] Page width.\n             *   @param {number} [options.size.height=null] Page height.\n             *  @param {string} [options.units='in'] Page units, applies to paper size, margins, and density. Valid value <code>[in | cm | mm]</code>\n             *\n             *  @param {boolean} [options.forceRaw=false] Print the specified raw data using direct method, skipping the driver.  Not yet supported on Windows.\n             *  @param {string|Object} [options.encoding=null] Character set for commands. Can be provided as an object for converting encoding types for RAW types.\n             *   @param {string} [options.encoding.from] If this encoding type is provided, RAW type commands will be parsed from this for the purpose of being converted to the <code>encoding.to</code> value.\n             *   @param {string} [options.encoding.to] Encoding RAW type commands will be converted into. If <Code>encoding.from</code> is not provided, this will be treated as if a string was passed for encoding.\n             *  @param {string} [options.endOfDoc=null] DEPRECATED Raw only: Character(s) denoting end of a page to control spooling.\n             *  @param {number} [options.perSpool=1] DEPRECATED: Raw only: Number of pages per spool.\n             *  @param {boolean} [options.retainTemp=false] Retain any temporary files used.  Ignored unless <code>forceRaw</code> <code>true</code>.\n             *  @param {Object} [options.spool=null] Advanced spooling options.\n             *   @param {number} [options.spool.size=null] Number of pages per spool.  Default is no limit.  If <code>spool.end</code> is provided, defaults to <code>1</code>\n             *   @param {string} [options.spool.end=null] Raw only: Character(s) denoting end of a page to control spooling.\n             *\n             * @memberof qz.configs\n             */\n            setDefaults: function(options) {\n                _qz.tools.extend(_qz.printing.defaultConfig, options);\n            },\n\n            /**\n             * Creates new printer config to be used in printing.\n             *\n             * @param {string|object} printer Name of printer. Use object type to specify printing to file or host.\n             *  @param {string} [printer.name] Name of printer to send printing.\n             *  @param {string} [printer.file] Name of file to send printing.\n             *  @param {string} [printer.host] IP address or host name to send printing.\n             *  @param {string} [printer.port] Port used by &lt;printer.host>.\n             * @param {Object} [options] Override any of the default options for this config only.\n             *\n             * @returns {Config} The new config.\n             *\n             * @see configs.setDefaults\n             *\n             * @memberof qz.configs\n             */\n            create: function(printer, options) {\n                return new Config(printer, options);\n            }\n        },\n\n\n        /**\n         * Send data to selected config for printing.\n         * The promise for this method will resolve when the document has been sent to the printer. Actual printing may not be complete.\n         * <p/>\n         * Optionally, print requests can be pre-signed:\n         * Signed content consists of a JSON object string containing no spacing,\n         * following the format of the \"call\" and \"params\" keys in the API call, with the addition of a \"timestamp\" key in milliseconds\n         * ex. <code>'{\"call\":\"<callName>\",\"params\":{...},\"timestamp\":1450000000}'</code>\n         *\n         * @param {Object<Config>|Array<Object<Config>>} configs Previously created config object or objects.\n         * @param {Array<Object|string>|Array<Array<Object|string>>} data Array of data being sent to the printer.<br/>\n         *      String values are interpreted as <code>{type: 'raw', format: 'command', flavor: 'plain', data: &lt;string>}</code>.\n         *  @param {string} data.data\n         *  @param {string} data.type Printing type. Valid types are <code>[pixel | raw*]</code>. *Default\n         *  @param {string} data.format Format of data type used. *Default per type<p/>\n         *      For <code>[pixel]</code> types, valid formats are <code>[html | image* | pdf]</code>.<p/>\n         *      For <code>[raw]</code> types, valid formats are <code>[command* | html | image | pdf]</code>.\n         *  @param {string} data.flavor Flavor of data format used. *Default per format<p/>\n         *      For <code>[command]</code> formats, valid flavors are <code>[base64 | file | hex | plain* | xml]</code>.<p/>\n         *      For <code>[html]</code> formats, valid flavors are <code>[file* | plain]</code>.<p/>\n         *      For <code>[image]</code> formats, valid flavors are <code>[base64 | file*]</code>.<p/>\n         *      For <code>[pdf]</code> formats, valid flavors are <code>[base64 | file*]</code>.\n         *  @param {Object} [data.options]\n         *   @param {string} [data.options.language] Required with <code>[raw]</code> type + <code>[image]</code> format. Printer language.\n         *   @param {number} [data.options.x] Optional with <code>[raw]</code> type + <code>[image]</code> format. The X position of the image.\n         *   @param {number} [data.options.y] Optional with <code>[raw]</code> type + <code>[image]</code> format. The Y position of the image.\n         *   @param {string|number} [data.options.dotDensity] Optional with <code>[raw]</code> type + <code>[image]</code> format.\n         *   @param {number} [data.precision=128] Optional with <code>[raw]</code> type <code>[image]</code> format. Bit precision of the ribbons.\n         *   @param {boolean|string|Array<Array<number>>} [data.options.overlay=false] Optional with <code>[raw]</code> type <code>[image]</code> format.\n         *       Boolean sets entire layer, string sets mask image, Array sets array of rectangles in format <code>[x1,y1,x2,y2]</code>.\n         *   @param {string} [data.options.xmlTag] Required with <code>[xml]</code> flavor. Tag name containing base64 formatted data.\n         *   @param {number} [data.options.pageWidth] Optional with <code>[html | pdf]</code> formats. Width of the rendering.\n         *       Defaults to paper width.\n         *   @param {number} [data.options.pageHeight] Optional with <code>[html | pdf]</code> formats. Height of the rendering.\n         *       Defaults to paper height for <code>[pdf]</code>, or auto sized for <code>[html]</code>.\n         *   @param {string} [data.options.pageRanges] Optional with <code>[pdf]</code> formats. Comma-separated list of page ranges to include.\n         *   @param {boolean} [data.options.ignoreTransparency=false] Optional with <code>[pdf]</code> formats. Instructs transparent PDF elements to be ignored.\n         *       Transparent PDF elements are known to degrade performance and quality when printing.\n         *   @param {boolean} [data.options.altFontRendering=false] Optional with <code>[pdf]</code> formats. Instructs PDF to be rendered using PDFBOX 1.8 techniques.\n         *       Drastically improves low-DPI PDF print quality on Windows.\n         * @param {...*} [arguments] Additionally three more parameters can be specified:<p/>\n         *     <code>{boolean} [resumeOnError=false]</code> Whether the chain should continue printing if it hits an error on one the the prints.<p/>\n         *     <code>{string|Array<string>} [signature]</code> Pre-signed signature(s) of the JSON string for containing <code>call</code>, <code>params</code>, and <code>timestamp</code>.<p/>\n         *     <code>{number|Array<number>} [signingTimestamps]</code> Required to match with <code>signature</code>. Timestamps for each of the passed pre-signed content.\n         *\n         * @returns {Promise<null|Error>}\n         *\n         * @see qz.configs.create\n         *\n         * @memberof qz\n         */\n        print: function(configs, data) {\n            var resumeOnError = false,\n                signatures = [],\n                signaturesTimestamps = [];\n\n            //find optional parameters\n            if (arguments.length >= 3) {\n                if (typeof arguments[2] === 'boolean') {\n                    resumeOnError = arguments[2];\n\n                    if (arguments.length >= 5) {\n                        signatures = arguments[3];\n                        signaturesTimestamps = arguments[4];\n                    }\n                } else if (arguments.length >= 4) {\n                    signatures = arguments[2];\n                    signaturesTimestamps = arguments[3];\n                }\n\n                //ensure values are arrays for consistency\n                if (signatures && !Array.isArray(signatures)) { signatures = [signatures]; }\n                if (signaturesTimestamps && !Array.isArray(signaturesTimestamps)) { signaturesTimestamps = [signaturesTimestamps]; }\n            }\n\n            if (!Array.isArray(configs)) { configs = [configs]; } //single config -> array of configs\n            if (!Array.isArray(data[0])) { data = [data]; } //single data array -> array of data arrays\n\n            //clean up data formatting\n            for(var d = 0; d < data.length; d++) {\n                _qz.tools.relative(data[d]);\n                _qz.compatible.data(data[d]);\n            }\n\n            var sendToPrint = function(mapping) {\n                var params = {\n                    printer: mapping.config.getPrinter(),\n                    options: mapping.config.getOptions(),\n                    data: mapping.data\n                };\n\n                return _qz.websocket.dataPromise('print', params, mapping.signature, mapping.timestamp);\n            };\n\n            //chain instead of Promise.all, so resumeOnError can collect each error\n            var chain = [];\n            for(var i = 0; i < configs.length || i < data.length; i++) {\n                (function(i_) {\n                    var map = {\n                        config: configs[Math.min(i_, configs.length - 1)],\n                        data: data[Math.min(i_, data.length - 1)],\n                        signature: signatures[i_],\n                        timestamp: signaturesTimestamps[i_]\n                    };\n\n                    chain.push(function() { return sendToPrint(map) });\n                })(i);\n            }\n\n            //setup to catch errors if needed\n            var fallThrough = null;\n            if (resumeOnError) {\n                var fallen = [];\n                fallThrough = function(err) { fallen.push(err); };\n\n                //final promise to reject any errors as a group\n                chain.push(function() {\n                    return _qz.tools.promise(function(resolve, reject) {\n                        fallen.length ? reject(fallen) : resolve();\n                    });\n                });\n            }\n\n            var last = null;\n            chain.reduce(function(sequence, link) {\n                last = sequence.catch(fallThrough).then(link); //catch is ignored if fallThrough is null\n                return last;\n            }, _qz.tools.promise(function(r) { r(); })); //an immediately resolved promise to start off the chain\n\n            //return last promise so users can chain off final action or catch when stopping on error\n            return last;\n        },\n\n\n        /**\n         * Calls related to interaction with serial ports.\n         * @namespace qz.serial\n         */\n        serial: {\n            /**\n             * @returns {Promise<Array<string>|Error>} Communication (RS232, COM, TTY) ports available on connected system.\n             *\n             * @memberof qz.serial\n             */\n            findPorts: function() {\n                return _qz.websocket.dataPromise('serial.findPorts');\n            },\n\n            /**\n             * List of functions called for any response from open serial ports.\n             * Event data will contain <code>{string} portName</code> for all types.\n             *  For RECEIVE types, <code>{string} output</code>.\n             *  For ERROR types, <code>{string} exception</code>.\n             *\n             * @param {Function|Array<Function>} calls Single or array of <code>Function({object} streamEvent)</code> calls.\n             *\n             * @memberof qz.serial\n             */\n            setSerialCallbacks: function(calls) {\n                _qz.serial.serialCallbacks = calls;\n            },\n\n            /**\n             * Opens a serial port for sending and receiving data\n             *\n             * @param {string} port Name of serial port to open.\n             * @param {Object} [options] Serial port configurations.\n             *  @param {number} [options.baudRate=9600] Serial port speed. Set to 0 for auto negotiation.\n             *  @param {number} [options.dataBits=8] Serial port data bits. Set to 0 for auto negotiation.\n             *  @param {number} [options.stopBits=1] Serial port stop bits. Set to 0 for auto negotiation.\n             *  @param {string} [options.parity='NONE'] Serial port parity. Set to AUTO for auto negotiation. Valid values <code>[NONE | EVEN | ODD | MARK | SPACE | AUTO]</code>\n             *  @param {string} [options.flowControl='NONE'] Serial port flow control. Set to AUTO for auto negotiation. Valid values <code>[NONE | XONXOFF | XONXOFF_OUT | XONXOFF_IN | RTSCTS | RTSCTS_OUT | RTSCTS_IN | AUTO]</code>\n             *  @param {string} [options.encoding='UTF-8'] Character set for communications.\n             *  @param {string} [options.start=0x0002] DEPRECATED: Legacy character denoting start of serial response. Use <code>options.rx.start</code> instead.\n             *  @param {string} [options.end=0x000D] DEPRECATED: Legacy character denoting end of serial response. Use <code>options.rx.end</code> instead.\n             *  @param {number} [options.width] DEPRECATED: Legacy use for fixed-width response serial communication. Use <code>options.rx.width</code> instead.\n             *  @param {Object} [options.rx] Serial communications response definitions. If an object is passed but no options are defined, all response data will be sent back as it is received unprocessed.\n             *   @param {string|Array<string>} [options.rx.start] Character(s) denoting start of response bytes. Used in conjunction with `end`, `width`, or `lengthbit` property.\n             *   @param {string} [options.rx.end] Character denoting end of response bytes. Used in conjunction with `start` property.\n             *   @param {number} [options.rx.width] Fixed width size of response bytes (not including header if `start` is set). Used alone or in conjunction with `start` property.\n             *   @param {boolean} [options.rx.untilNewline] Returns data between newline characters (`\\n` or `\\r`) Truncates empty responses.  Overrides `start`, `end`, `width`.\n             *   @param {number|Object} [options.rx.lengthBytes] If a number is passed it is treated as the length index. Other values are left as their defaults.\n             *    @param {number} [options.rx.lengthBytes.index=0] Position of the response byte (not including response `start` bytes) used to denote the length of the remaining response data.\n             *    @param {number} [options.rx.lengthBytes.length=1] Length of response length bytes after response header.\n             *    @param {string} [options.rx.lengthBytes.endian='BIG'] Byte endian for multi-byte length values. Valid values <code>[BIG | LITTLE]</code>\n             *   @param {number|Object} [options.rx.crcBytes] If a number is passed it is treated as the crc length. Other values are left as their defaults.\n             *    @param {number} [options.rx.crcBytes.index=0] Position after the response data (not including length or data bytes) used to denote the crc.\n             *    @param {number} [options.rx.crcBytes.length=1] Length of response crc bytes after the response data length.\n             *   @param {boolean} [options.rx.includeHeader=false] Whether any of the header bytes (`start` bytes and any length bytes) should be included in the processed response.\n             *   @param {string} [options.rx.encoding] Override the encoding used for response data. Uses the same value as <code>options.encoding</code> otherwise.\n             *\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.serial\n             */\n            openPort: function(port, options) {\n                var params = {\n                    port: port,\n                    options: options\n                };\n                return _qz.websocket.dataPromise('serial.openPort', params);\n            },\n\n            /**\n             * Send commands over a serial port.\n             * Any responses from the device will be sent to serial callback functions.\n             *\n             * @param {string} port An open serial port to send data.\n             * @param {string|Array<string>|Object} data Data to be sent to the serial device.\n             *  @param {string} [data.type='PLAIN'] Valid values <code>[FILE | PLAIN | HEX | BASE64]</code>\n             *  @param {string|Array<string>} data.data Data to be sent to the serial device.\n             * @param {Object} options Serial port configuration updates. See <code>qz.serial.openPort</code> `options` docs for available values.\n             *     For best performance, it is recommended to only set these values on the port open call.\n             *\n             * @returns {Promise<null|Error>}\n             *\n             * @see qz.serial.setSerialCallbacks\n             *\n             * @memberof qz.serial\n             */\n            sendData: function(port, data, options) {\n                if (_qz.tools.versionCompare(2, 1, 0, 12) >= 0) {\n                    if (typeof data !== 'object') {\n                        data = {\n                            data: data,\n                            type: \"PLAIN\"\n                        }\n                    }\n\n                    if (data.type && data.type.toUpperCase() == \"FILE\") {\n                        data.data = _qz.tools.absolute(data.data);\n                    }\n                }\n\n                var params = {\n                    port: port,\n                    data: data,\n                    options: options\n                };\n                return _qz.websocket.dataPromise('serial.sendData', params);\n            },\n\n            /**\n             * @param {string} port Name of port to close.\n             *\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.serial\n             */\n            closePort: function(port) {\n                return _qz.websocket.dataPromise('serial.closePort', { port: port });\n            }\n        },\n\n        /**\n         * Calls related to interaction with communication sockets.\n         * @namespace qz.socket\n         */\n        socket: {\n            /**\n             * Opens a network port for sending and receiving data.\n             *\n             * @param {string} host The connection hostname.\n             * @param {number} port The connection port number.\n             * @param {Object} [options] Network socket configuration.\n             *  @param {string} [options.encoding='UTF-8'] Character set for communications.\n             *\n             * @memberof qz.socket\n             */\n            open: function(host, port, options) {\n                var params = {\n                    host: host,\n                    port: port,\n                    options: options\n                };\n                return _qz.websocket.dataPromise(\"socket.open\", params);\n            },\n\n            /**\n             * @param {string} host The connection hostname.\n             * @param {number} port The connection port number.\n             *\n             * @memberof qz.socket\n             */\n            close: function(host, port) {\n                var params = {\n                    host: host,\n                    port: port\n                };\n                return _qz.websocket.dataPromise(\"socket.close\", params);\n            },\n\n            /**\n             * Send data over an open socket.\n             *\n             * @param {string} host The connection hostname.\n             * @param {number} port The connection port number.\n             * @param {string|Object} data Data to be sent over the port.\n             *  @param {string} [data.type='PLAIN'] Valid values <code>[PLAIN]</code>\n             *  @param {string} data.data Data to be sent over the port.\n             *\n             * @memberof qz.socket\n             */\n            sendData: function(host, port, data) {\n                if (typeof data !== 'object') {\n                    data = {\n                        data: data,\n                        type: \"PLAIN\"\n                    };\n                }\n\n                var params = {\n                    host: host,\n                    port: port,\n                    data: data\n                };\n                return _qz.websocket.dataPromise(\"socket.sendData\", params);\n            },\n\n            /**\n             * List of functions called for any response from open network sockets.\n             * Event data will contain <code>{string} host</code> and <code>{number} port</code> for all types.\n             *  For RECEIVE types, <code>{string} response</code>.\n             *  For ERROR types, <code>{string} exception</code>.\n             *\n             * @param {Function|Array<Function>} calls Single or array of <code>Function({Object} eventData)</code> calls.\n             *\n             * @memberof qz.socket\n             */\n            setSocketCallbacks: function(calls) {\n                _qz.socket.socketCallbacks = calls;\n            }\n        },\n\n        /**\n         * Calls related to interaction with USB devices.\n         * @namespace qz.usb\n         */\n        usb: {\n            /**\n             * List of available USB devices. Includes (hexadecimal) vendor ID, (hexadecimal) product ID, and hub status.\n             * If supported, also returns manufacturer and product descriptions.\n             *\n             * @param includeHubs Whether to include USB hubs.\n             * @returns {Promise<Array<Object>|Error>} Array of JSON objects containing information on connected USB devices.\n             *\n             * @memberof qz.usb\n             */\n            listDevices: function(includeHubs) {\n                return _qz.websocket.dataPromise('usb.listDevices', { includeHubs: includeHubs });\n            },\n\n            /**\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             * @returns {Promise<Array<string>|Error>} List of available (hexadecimal) interfaces on a USB device.\n             *\n             * @memberof qz.usb\n             */\n            listInterfaces: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('usb.listInterfaces', deviceInfo);\n            },\n\n            /**\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             *  @param deviceInfo.iface Hex string of interface on the USB device to search.\n             * @returns {Promise<Array<string>|Error>} List of available (hexadecimal) endpoints on a USB device's interface.\n             *\n             * @memberof qz.usb\n             */\n            listEndpoints: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        interface: arguments[2]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('usb.listEndpoints', deviceInfo);\n            },\n\n            /**\n             * List of functions called for any response from open usb devices.\n             * Event data will contain <code>{string} vendorId</code> and <code>{string} productId</code> for all types.\n             *  For RECEIVE types, <code>{Array} output</code> (in hexadecimal format).\n             *  For ERROR types, <code>{string} exception</code>.\n             *\n             * @param {Function|Array<Function>} calls Single or array of <code>Function({Object} eventData)</code> calls.\n             *\n             * @memberof qz.usb\n             */\n            setUsbCallbacks: function(calls) {\n                _qz.usb.usbCallbacks = calls;\n            },\n\n            /**\n             * Claim a USB device's interface to enable sending/reading data across an endpoint.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             *  @param deviceInfo.interface Hex string of interface on the USB device to claim.\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.usb\n             */\n            claimDevice: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        interface: arguments[2]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('usb.claimDevice', deviceInfo);\n            },\n\n            /**\n             * Check the current claim state of a USB device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             * @returns {Promise<boolean|Error>}\n             *\n             * @since 2.0.2\n             * @memberOf qz.usb\n             */\n            isClaimed: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('usb.isClaimed', deviceInfo);\n            },\n\n            /**\n             * Send data to a claimed USB device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             *  @param deviceInfo.endpoint Hex string of endpoint on the claimed interface for the USB device.\n             *  @param deviceInfo.data Bytes to send over specified endpoint.\n             *  @param {string} [deviceInfo.type='PLAIN'] Valid values <code>[FILE | PLAIN | HEX | BASE64]</code>\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.usb\n             */\n            sendData: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        endpoint: arguments[2],\n                        data: arguments[3]\n                    };\n                }\n\n                if (_qz.tools.versionCompare(2, 1, 0, 12) >= 0) {\n                    if (typeof deviceInfo.data !== 'object') {\n                        deviceInfo.data = {\n                            data: deviceInfo.data,\n                            type: \"PLAIN\"\n                        }\n                    }\n\n                    if (deviceInfo.data.type && deviceInfo.data.type.toUpperCase() == \"FILE\") {\n                        deviceInfo.data.data = _qz.tools.absolute(deviceInfo.data.data);\n                    }\n                }\n\n                return _qz.websocket.dataPromise('usb.sendData', deviceInfo);\n            },\n\n            /**\n             * Read data from a claimed USB device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             *  @param deviceInfo.endpoint Hex string of endpoint on the claimed interface for the USB device.\n             *  @param deviceInfo.responseSize Size of the byte array to receive a response in.\n             * @returns {Promise<Array<string>|Error>} List of (hexadecimal) bytes received from the USB device.\n             *\n             * @memberof qz.usb\n             */\n            readData: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        endpoint: arguments[2],\n                        responseSize: arguments[3]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('usb.readData', deviceInfo);\n            },\n\n            /**\n             * Provides a continuous stream of read data from a claimed USB device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             *  @param deviceInfo.endpoint Hex string of endpoint on the claimed interface for the USB device.\n             *  @param deviceInfo.responseSize Size of the byte array to receive a response in.\n             *  @param deviceInfo.interval=100 Frequency to send read data back, in milliseconds.\n             * @returns {Promise<null|Error>}\n             *\n             * @see qz.usb.setUsbCallbacks\n             *\n             * @memberof qz.usb\n             */\n            openStream: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        endpoint: arguments[2],\n                        responseSize: arguments[3],\n                        interval: arguments[4]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('usb.openStream', deviceInfo);\n            },\n\n            /**\n             * Stops the stream of read data from a claimed USB device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             *  @param deviceInfo.endpoint Hex string of endpoint on the claimed interface for the USB device.\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.usb\n             */\n            closeStream: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        endpoint: arguments[2]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('usb.closeStream', deviceInfo);\n            },\n\n            /**\n             * Release a claimed USB device to free resources after sending/reading data.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.usb\n             */\n            releaseDevice: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('usb.releaseDevice', deviceInfo);\n            }\n        },\n\n\n        /**\n         * Calls related to interaction with HID USB devices<br/>\n         * Many of these calls can be accomplished from the <code>qz.usb</code> namespace,\n         * but HID allows for simpler interaction\n         * @namespace qz.hid\n         * @since 2.0.1\n         */\n        hid: {\n            /**\n             * List of available HID devices. Includes (hexadecimal) vendor ID and (hexadecimal) product ID.\n             * If available, also returns manufacturer and product descriptions.\n             *\n             * @returns {Promise<Array<Object>|Error>} Array of JSON objects containing information on connected HID devices.\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            listDevices: function() {\n                return _qz.websocket.dataPromise('hid.listDevices');\n            },\n\n            /**\n             * Start listening for HID device actions, such as attach / detach events.\n             * Reported under the ACTION type in the streamEvent on callbacks.\n             *\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @see qz.hid.setHidCallbacks\n             *\n             * @memberof qz.hid\n             */\n            startListening: function() {\n                return _qz.websocket.dataPromise('hid.startListening');\n            },\n\n            /**\n             * Stop listening for HID device actions.\n             *\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @see qz.hid.setHidCallbacks\n             *\n             * @memberof qz.hid\n             */\n            stopListening: function() {\n                return _qz.websocket.dataPromise('hid.stopListening');\n            },\n\n            /**\n             * List of functions called for any response from open usb devices.\n             * Event data will contain <code>{string} vendorId</code> and <code>{string} productId</code> for all types.\n             *  For RECEIVE types, <code>{Array} output</code> (in hexadecimal format).\n             *  For ERROR types, <code>{string} exception</code>.\n             *  For ACTION types, <code>{string} actionType</code>.\n             *\n             * @param {Function|Array<Function>} calls Single or array of <code>Function({Object} eventData)</code> calls.\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            setHidCallbacks: function(calls) {\n                _qz.hid.hidCallbacks = calls;\n            },\n\n            /**\n             * Claim a HID device to enable sending/reading data across.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            claimDevice: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('hid.claimDevice', deviceInfo);\n            },\n\n            /**\n             * Check the current claim state of a HID device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             * @returns {Promise<boolean|Error>}\n             *\n             * @since 2.0.2\n             * @memberOf qz.hid\n             */\n            isClaimed: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('hid.isClaimed', deviceInfo);\n            },\n\n            /**\n             * Send data to a claimed HID device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             *  @param deviceInfo.data Bytes to send over specified endpoint.\n             *  @param deviceInfo.endpoint=0x00 First byte of the data packet signifying the HID report ID.\n             *                             Must be 0x00 for devices only supporting a single report.\n             *  @param deviceInfo.reportId=0x00 Alias for <code>deviceInfo.endpoint</code>. Not used if endpoint is provided.\n             *  @param {string} [deviceInfo.type='PLAIN'] Valid values <code>[FILE | PLAIN | HEX | BASE64]</code>\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            sendData: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        data: arguments[2],\n                        endpoint: arguments[3]\n                    };\n                }\n\n                if (_qz.tools.versionCompare(2, 1, 0, 12) >= 0) {\n                    if (typeof deviceInfo.data !== 'object') {\n                        deviceInfo.data = {\n                            data: deviceInfo.data,\n                            type: \"PLAIN\"\n                        }\n                    }\n\n                    if (deviceInfo.data.type && deviceInfo.data.type.toUpperCase() == \"FILE\") {\n                        deviceInfo.data.data = _qz.tools.absolute(deviceInfo.data.data);\n                    }\n                } else {\n                    if (typeof deviceInfo.data === 'object') {\n                        if (deviceInfo.data.type.toUpperCase() !== \"PLAIN\"\n                            || typeof deviceInfo.data.data !== \"string\") {\n                            return _qz.tools.reject(new Error(\"Data format is not supported with connected QZ Tray version \" + _qz.websocket.connection.version));\n                        }\n\n                        deviceInfo.data = deviceInfo.data.data;\n                    }\n                }\n\n                return _qz.websocket.dataPromise('hid.sendData', deviceInfo);\n            },\n\n            /**\n             * Read data from a claimed HID device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             *  @param deviceInfo.responseSize Size of the byte array to receive a response in.\n             * @returns {Promise<Array<string>|Error>} List of (hexadecimal) bytes received from the HID device.\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            readData: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        responseSize: arguments[2]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('hid.readData', deviceInfo);\n            },\n\n            /**\n             * Send a feature report to a claimed HID device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             *  @param deviceInfo.data Bytes to send over specified endpoint.\n             *  @param deviceInfo.endpoint=0x00 First byte of the data packet signifying the HID report ID.\n             *                             Must be 0x00 for devices only supporting a single report.\n             *  @param deviceInfo.reportId=0x00 Alias for <code>deviceInfo.endpoint</code>. Not used if endpoint is provided.\n             *  @param {string} [deviceInfo.type='PLAIN'] Valid values <code>[FILE | PLAIN | HEX | BASE64]</code>\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.hid\n             */\n            sendFeatureReport: function(deviceInfo) {\n                return _qz.websocket.dataPromise('hid.sendFeatureReport', deviceInfo);\n            },\n\n            /**\n             * Get a feature report from a claimed HID device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             *  @param deviceInfo.responseSize Size of the byte array to receive a response in.\n             * @returns {Promise<Array<string>|Error>} List of (hexadecimal) bytes received from the HID device.\n             *\n             * @memberof qz.hid\n             */\n            getFeatureReport: function(deviceInfo) {\n                return _qz.websocket.dataPromise('hid.getFeatureReport', deviceInfo);\n            },\n\n            /**\n             * Provides a continuous stream of read data from a claimed HID device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             *  @param deviceInfo.responseSize Size of the byte array to receive a response in.\n             *  @param deviceInfo.interval=100 Frequency to send read data back, in milliseconds.\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @see qz.hid.setHidCallbacks\n             *\n             * @memberof qz.hid\n             */\n            openStream: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        responseSize: arguments[2],\n                        interval: arguments[3]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('hid.openStream', deviceInfo);\n            },\n\n            /**\n             * Stops the stream of read data from a claimed HID device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            closeStream: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('hid.closeStream', deviceInfo);\n            },\n\n            /**\n             * Release a claimed HID device to free resources after sending/reading data.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            releaseDevice: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('hid.releaseDevice', deviceInfo);\n            }\n        },\n\n\n        /**\n         * Calls related to interactions with the filesystem\n         * @namespace qz.file\n         * @since 2.1\n         */\n        file: {\n            /**\n             * List of files available at the given directory.<br/>\n             * Due to security reasons, paths are limited to the qz data directory unless overridden via properties file.\n             *\n             * @param {string} path Relative or absolute directory path. Must reside in qz data directory or a white-listed location.\n             * @param {Object} [params] Object containing file access parameters\n             *  @param {boolean} [params.sandbox=true] If relative location from root is only available to the certificate's connection, otherwise all connections\n             *  @param {boolean} [params.shared=true] If relative location from root is accessible to all users on the system, otherwise just the current user\n             * @returns {Promise<Array<String>|Error>} Array of files at the given path\n             *\n             * @memberof qz.file\n             */\n            list: function(path, params) {\n                var param = _qz.tools.extend({ path: path }, params);\n                return _qz.websocket.dataPromise('file.list', param);\n            },\n\n            /**\n             * Reads contents of file at the given path.<br/>\n             * Due to security reasons, paths are limited to the qz data directory unless overridden via properties file.\n             *\n             * @param {string} path Relative or absolute file path. Must reside in qz data directory or a white-listed location.\n             * @param {Object} [params] Object containing file access parameters\n             *  @param {boolean} [params.sandbox=true] If relative location from root is only available to the certificate's connection, otherwise all connections\n             *  @param {boolean} [params.shared=true] If relative location from root is accessible to all users on the system, otherwise just the current user\n             *  @param {string} [params.flavor='plain'] Flavor of data format used, valid flavors are <code>[base64 | hex | plain]</code>.\n             * @returns {Promise<String|Error>} String containing the file contents\n             *\n             * @memberof qz.file\n             */\n            read: function(path, params) {\n                var param = _qz.tools.extend({ path: path }, params);\n                return _qz.websocket.dataPromise('file.read', param);\n            },\n\n            /**\n             * Writes data to the file at the given path.<br/>\n             * Due to security reasons, paths are limited to the qz data directory unless overridden via properties file.\n             *\n             * @param {string} path Relative or absolute file path. Must reside in qz data directory or a white-listed location.\n             * @param {Object} params Object containing file access parameters\n             *  @param {string} params.data File data to be written\n             *  @param {boolean} [params.sandbox=true] If relative location from root is only available to the certificate's connection, otherwise all connections\n             *  @param {boolean} [params.shared=true] If relative location from root is accessible to all users on the system, otherwise just the current user\n             *  @param {boolean} [params.append=false] Appends to the end of the file if set, otherwise overwrites existing contents\n             *  @param {string} [params.flavor='plain'] Flavor of data format used, valid flavors are <code>[base64 | file | hex | plain]</code>.\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.file\n             */\n            write: function(path, params) {\n                var param = _qz.tools.extend({ path: path }, params);\n                return _qz.websocket.dataPromise('file.write', param);\n            },\n\n            /**\n             * Deletes a file at given path.<br/>\n             * Due to security reasons, paths are limited to the qz data directory unless overridden via properties file.\n             *\n             * @param {string} path Relative or absolute file path. Must reside in qz data directory or a white-listed location.\n             * @param {Object} [params] Object containing file access parameters\n             *  @param {boolean} [params.sandbox=true] If relative location from root is only available to the certificate's connection, otherwise all connections\n             *  @param {boolean} [params.shared=true] If relative location from root is accessible to all users on the system, otherwise just the current user\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.file\n             */\n            remove: function(path, params) {\n                var param = _qz.tools.extend({ path: path }, params);\n                return _qz.websocket.dataPromise('file.remove', param);\n            },\n\n            /**\n             * Provides a continuous stream of events (and optionally data) from a local file.\n             *\n             * @param {string} path Relative or absolute directory path. Must reside in qz data directory or a white-listed location.\n             * @param {Object} [params] Object containing file access parameters\n             *  @param {boolean} [params.sandbox=true] If relative location from root is only available to the certificate's connection, otherwise all connections\n             *  @param {boolean} [params.shared=true] If relative location from root is accessible to all users on the system, otherwise just the current user\n             *  @param {Object} [params.listener] If defined, file data will be returned on events\n             *   @param {number} [params.listener.bytes=-1] Number of bytes to return or -1 for all\n             *   @param {number} [params.listener.lines=-1] Number of lines to return or -1 for all\n             *   @param {boolean} [params.listener.reverse] Controls whether data should be returned from the bottom of the file.  Default value is true for line mode and false for byte mode.\n             *   @param {string|Array<string>} [params.include] File patterns to match.  Blank values will be ignored.\n             *   @param {string|Array<string>} [params.exclude] File patterns to exclude.  Blank values will be ignored.  Takes priority over <code>params.include</code>.\n             *   @param {boolean} [params.ignoreCase=true] Whether <code>params.include</code> or <code>params.exclude</code> are case-sensitive.\n             * @returns {Promise<null|Error>}\n             * @since 2.1.0\n             *\n             * @see qz.file.setFileCallbacks\n             *\n             * @memberof qz.file\n             */\n            startListening: function(path, params) {\n                if (params && typeof params.include !== 'undefined' && !Array.isArray(params.include)) {\n                    params.include = [params.include];\n                }\n                if (params && typeof params.exclude !== 'undefined' && !Array.isArray(params.exclude)) {\n                    params.exclude = [params.exclude];\n                }\n                var param = _qz.tools.extend({ path: path }, params);\n                return _qz.websocket.dataPromise('file.startListening', param);\n            },\n\n            /**\n             * Closes listeners with the provided settings. Omitting the path parameter will result in all listeners closing.\n             *\n             * @param {string} [path] Previously opened directory path of listener to close, or omit to close all.\n             * @param {Object} [params] Object containing file access parameters\n             *  @param {boolean} [params.sandbox=true] If relative location from root is only available to the certificate's connection, otherwise all connections\n             *  @param {boolean} [params.shared=true] If relative location from root is accessible to all users on the system, otherwise just the current user\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.file\n             */\n            stopListening: function(path, params) {\n                var param = _qz.tools.extend({ path: path }, params);\n                return _qz.websocket.dataPromise('file.stopListening', param);\n            },\n\n            /**\n             * List of functions called for any response from a file listener.\n             *  For ERROR types event data will contain, <code>{string} message</code>.\n             *  For ACTION types event data will contain, <code>{string} file {string} eventType {string} [data]</code>.\n             *\n             * @param {Function|Array<Function>} calls Single or array of <code>Function({Object} eventData)</code> calls.\n             * @since 2.1.0\n             *\n             * @memberof qz.file\n             */\n            setFileCallbacks: function(calls) {\n                _qz.file.fileCallbacks = calls;\n            }\n        },\n\n        /**\n         * Calls related to networking information\n         * @namespace qz.networking\n         * @since 2.1.0\n         */\n        networking: {\n            /**\n             * @param {string} [hostname] Hostname to try to connect to when determining network interfaces, defaults to \"google.com\"\n             * @param {number} [port] Port to use with custom hostname, defaults to 443\n             * @returns {Promise<Object|Error>} Connected system's network information.\n             *\n             * @memberof qz.networking\n             * @since 2.1.0\n             */\n            device: function(hostname, port) {\n                // Wrap 2.0\n                if (_qz.tools.isVersion(2, 0)) {\n                    return _qz.compatible.networking(hostname, port, null, null, function(data) {\n                        return { ip: data.ipAddress, mac: data.macAddress };\n                    });\n                }\n                // Use 2.1\n                return _qz.websocket.dataPromise('networking.device', {\n                    hostname: hostname,\n                    port: port\n                });\n            },\n\n            /**\n             * Get computer hostname\n             *\n             * @param {string} [hostname] DEPRECATED Hostname to try to connect to when determining network interfaces, defaults to \"google.com\"\n             * @param {number} [port] DEPRECATED Port to use with custom hostname, defaults to 443\n             * @returns {Promise<string|Error>} Connected system's hostname.\n             *\n             * @memberof qz.networking\n             * @since 2.2.2\n             */\n            hostname: function(hostname, port) {\n                // Wrap < 2.2.2\n                if (_qz.tools.versionCompare(2, 2, 2) < 0) {\n                    return _qz.tools.promise(function(resolve, reject) {\n                        _qz.websocket.dataPromise('networking.device', { hostname: hostname, port: port }).then(function(device) {\n                            console.log(device);\n                            resolve(device.hostname);\n                        });\n                    });\n                } else {\n                    return _qz.websocket.dataPromise('networking.hostname');\n                }\n            },\n\n            /**\n             * @param {string} [hostname] Hostname to try to connect to when determining network interfaces, defaults to \"google.com\"\n             * @param {number} [port] Port to use with custom hostname, defaults to 443\n             * @returns {Promise<Array<Object>|Error>} Connected system's network information.\n             *\n             * @memberof qz.networking\n             * @since 2.1.0\n             */\n            devices: function(hostname, port) {\n                // Wrap 2.0\n                if (_qz.tools.isVersion(2, 0)) {\n                    return _qz.compatible.networking(hostname, port, null, null, function(data) {\n                        return [{ ip: data.ipAddress, mac: data.macAddress }];\n                    });\n                }\n                // Use 2.1\n                return _qz.websocket.dataPromise('networking.devices', {\n                    hostname: hostname,\n                    port: port\n                });\n            }\n        },\n\n\n        /**\n         * Calls related to signing connection requests.\n         * @namespace qz.security\n         */\n        security: {\n            /**\n             * Set promise resolver for calls to acquire the site's certificate.\n             *\n             * @param {Function|AsyncFunction|Promise<string>} promiseHandler Either a function that will be used as a promise resolver (of format <code>Function({function} resolve, {function}reject)</code>),\n             *     an async function, or a promise. Any of which should return the public certificate via their respective <code>resolve</code> call.\n             * @param {Object} [options] Configuration options for the certificate resolver\n             *  @param {boolean} [options.rejectOnFailure=[false]] Overrides default behavior to call resolve with a blank certificate on failure.\n             * @memberof qz.security\n             */\n            setCertificatePromise: function(promiseHandler, options) {\n                _qz.security.certHandler = promiseHandler;\n                _qz.security.rejectOnCertFailure = !!(options && options.rejectOnFailure);\n            },\n\n            /**\n             * Set promise factory for calls to sign API calls.\n             *\n             * @param {Function|AsyncFunction} promiseFactory Either a function that accepts a string parameter of the data to be signed\n             *     and returns a function to be used as a promise resolver (of format <code>Function({function} resolve, {function}reject)</code>),\n             *     or an async function that can take a string parameter of the data to be signed. Either of which should return the signed contents of\n             *     the passed string parameter via their respective <code>resolve</code> call.\n             *\n             * @example\n             *  qz.security.setSignaturePromise(function(dataToSign) {\n             *    return function(resolve, reject) {\n             *      $.ajax(\"/signing-url?data=\" + dataToSign).then(resolve, reject);\n             *    }\n             *  })\n             *\n             * @memberof qz.security\n             */\n            setSignaturePromise: function(promiseFactory) {\n                _qz.security.signatureFactory = promiseFactory;\n            },\n\n            /**\n             * Set which signing algorithm QZ will check signatures against.\n             *\n             * @param {string} algorithm The algorithm used in signing. Valid values: <code>[SHA1 | SHA256 | SHA512]</code>\n             * @since 2.1.0\n             *\n             * @memberof qz.security\n             */\n            setSignatureAlgorithm: function(algorithm) {\n                //warn for incompatibilities if known\n                if (!_qz.compatible.algorithm()) {\n                    return;\n                }\n\n                if ([\"SHA1\", \"SHA256\", \"SHA512\"].indexOf(algorithm.toUpperCase()) < 0) {\n                    _qz.log.error(\"Signing algorithm '\" + algorithm + \"' is not supported.\");\n                } else {\n                    _qz.security.signAlgorithm = algorithm;\n                }\n            },\n\n            /**\n             * Get the signing algorithm QZ will be checking signatures against.\n             *\n             * @returns {string} The algorithm used in signing.\n             * @since 2.1.0\n             *\n             * @memberof qz.security\n             */\n            getSignatureAlgorithm: function() {\n                return _qz.security.signAlgorithm;\n            }\n        },\n\n        /**\n         * Calls related to compatibility adjustments\n         * @namespace qz.api\n         */\n        api: {\n            /**\n             * Show or hide QZ api debugging statements in the browser console.\n             *\n             * @param {boolean} show Whether the debugging logs for QZ should be shown. Hidden by default.\n             * @returns {boolean} Value of debugging flag\n             * @memberof qz.api\n             */\n            showDebug: function(show) {\n                return (_qz.DEBUG = show);\n            },\n\n            /**\n             * Get version of connected QZ Tray application.\n             *\n             * @returns {Promise<string|Error>} Version number of QZ Tray.\n             *\n             * @memberof qz.api\n             */\n            getVersion: function() {\n                return _qz.websocket.dataPromise('getVersion');\n            },\n\n            /**\n             * Checks for the specified version of connected QZ Tray application.\n             *\n             * @param {string|number} [major] Major version to check\n             * @param {string|number} [minor] Minor version to check\n             * @param {string|number} [patch] Patch version to check\n             *\n             * @memberof qz.api\n             */\n            isVersion: _qz.tools.isVersion,\n\n            /**\n             * Checks if the connected QZ Tray application is greater than the specified version.\n             *\n             * @param {string|number} major Major version to check\n             * @param {string|number} [minor] Minor version to check\n             * @param {string|number} [patch] Patch version to check\n             * @param {string|number} [build] Build version to check\n             * @returns {boolean} True if connected version is greater than the version specified.\n             *\n             * @memberof qz.api\n             * @since 2.1.0-4\n             */\n            isVersionGreater: function(major, minor, patch, build) {\n                return _qz.tools.versionCompare(major, minor, patch, build) > 0;\n            },\n\n            /**\n             * Checks if the connected QZ Tray application is less than the specified version.\n             *\n             * @param {string|number} major Major version to check\n             * @param {string|number} [minor] Minor version to check\n             * @param {string|number} [patch] Patch version to check\n             * @param {string|number} [build] Build version to check\n             * @returns {boolean} True if connected version is less than the version specified.\n             *\n             * @memberof qz.api\n             * @since 2.1.0-4\n             */\n            isVersionLess: function(major, minor, patch, build) {\n                return _qz.tools.versionCompare(major, minor, patch, build) < 0;\n            },\n\n            /**\n             * Change the promise library used by QZ API.\n             * Should be called before any initialization to avoid possible errors.\n             *\n             * @param {Function} promiser <code>Function({function} resolver)</code> called to create new promises.\n             *\n             * @memberof qz.api\n             */\n            setPromiseType: function(promiser) {\n                _qz.tools.promise = promiser;\n            },\n\n            /**\n             * Change the SHA-256 hashing function used by QZ API.\n             * Should be called before any initialization to avoid possible errors.\n             *\n             * @param {Function} hasher <code>Function({function} message)</code> called to create hash of passed string.\n             *\n             * @memberof qz.api\n             */\n            setSha256Type: function(hasher) {\n                _qz.tools.hash = hasher;\n            },\n\n            /**\n             * Change the WebSocket handler.\n             * Should be called before any initialization to avoid possible errors.\n             *\n             * @param {Function} ws <code>Function({function} WebSocket)</code> called to override the internal WebSocket handler.\n             *\n             * @memberof qz.api\n             */\n            setWebSocketType: function(ws) {\n                _qz.tools.ws = ws;\n            }\n        },\n\n        /**\n         * Version of this JavaScript library\n         *\n         * @constant {string}\n         *\n         * @memberof qz\n         */\n        version: _qz.VERSION\n    };\n\n    return qz;\n})();\n\n\n(function() {\n    if (typeof define === 'function' && define.amd) {\n        define(qz);\n    } else if (typeof exports === 'object') {\n        module.exports = qz;\n    } else {\n        window.qz = qz;\n    }\n})();\n"],
  "mappings": "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",
  "names": ["qz"]
}
